// Generated by Bisonc++ V4.09.02 on Tue, 07 Apr 2015 17:48:53 -0700

// $insert class.ih
#include "Parser.ih"

// The FIRST element of SR arrays shown below uses `d_type', defining the
// state's type, and `d_lastIdx' containing the last element's index. If
// d_lastIdx contains the REQ_TOKEN bitflag (see below) then the state needs
// a token: if in this state d_token__ is _UNDETERMINED_, nextToken() will be
// called

// The LAST element of SR arrays uses `d_token' containing the last retrieved
// token to speed up the (linear) seach.  Except for the first element of SR
// arrays, the field `d_action' is used to determine what to do next. If
// positive, it represents the next state (used with SHIFT); if zero, it
// indicates `ACCEPT', if negative, -d_action represents the number of the
// rule to reduce to.

// `lookup()' tries to find d_token__ in the current SR array. If it fails, and
// there is no default reduction UNEXPECTED_TOKEN__ is thrown, which is then
// caught by the error-recovery function.

// The error-recovery function will pop elements off the stack until a state
// having bit flag ERR_ITEM is found. This state has a transition on _error_
// which is applied. In this _error_ state, while the current token is not a
// proper continuation, new tokens are obtained by nextToken(). If such a
// token is found, error recovery is successful and the token is
// handled according to the error state's SR table and parsing continues.
// During error recovery semantic actions are ignored.

// A state flagged with the DEF_RED flag will perform a default
// reduction if no other continuations are available for the current token.

// The ACCEPT STATE never shows a default reduction: when it is reached the
// parser returns ACCEPT(). During the grammar
// analysis phase a default reduction may have been defined, but it is
// removed during the state-definition phase.

// So:
//      s_x[] = 
//      {
//                  [_field_1_]         [_field_2_]
//
// First element:   {state-type,        idx of last element},
// Other elements:  {required token,    action to perform},
//                                      ( < 0: reduce, 
//                                          0: ACCEPT,
//                                        > 0: next state)
// Last element:    {set to d_token__,    action to perform}
//      }

// When the --thread-safe option is specified, all static data are defined as
// const. If --thread-safe is not provided, the state-tables are not defined
// as const, since the lookup() function below will modify them


namespace // anonymous
{
    char const author[] = "Frank B. Brokken (f.b.brokken@rug.nl)";

    enum 
    {
        STACK_EXPANSION = 5     // size to expand the state-stack with when
                                // full
    };

    enum ReservedTokens
    {
        PARSE_ACCEPT     = 0,   // `ACCEPT' TRANSITION
        _UNDETERMINED_   = -2,
        _EOF_            = -1,
        _error_          = 256
    };
    enum StateType       // modify statetype/data.cc when this enum changes
    {
        NORMAL,
        ERR_ITEM,
        REQ_TOKEN,
        ERR_REQ,    // ERR_ITEM | REQ_TOKEN
        DEF_RED,    // state having default reduction
        ERR_DEF,    // ERR_ITEM | DEF_RED
        REQ_DEF,    // REQ_TOKEN | DEF_RED
        ERR_REQ_DEF // ERR_ITEM | REQ_TOKEN | DEF_RED
    };    
    struct PI__     // Production Info
    {
        size_t d_nonTerm; // identification number of this production's
                            // non-terminal 
        size_t d_size;    // number of elements in this production 
    };

    struct SR__     // Shift Reduce info, see its description above
    {
        union
        {
            int _field_1_;      // initializer, allowing initializations 
                                // of the SR s_[] arrays
            int d_type;
            int d_token;
        };
        union
        {
            int _field_2_;

            int d_lastIdx;          // if negative, the state uses SHIFT
            int d_action;           // may be negative (reduce), 
                                    // postive (shift), or 0 (accept)
            size_t d_errorState;    // used with Error states
        };
    };

    // $insert staticdata
    
// Productions Info Records:
PI__ const s_productionInfo[] = 
{
     {0, 0}, // not used: reduction values are negative
     {343, 6}, // 1: program (CLASS) ->  CLASS ident LBRACE field_decl_list method_decl_list RBRACE
     {343, 5}, // 2: program (CLASS) ->  CLASS ident LBRACE field_decl_list RBRACE
     {343, 5}, // 3: program (CLASS) ->  CLASS ident LBRACE method_decl_list RBRACE
     {343, 4}, // 4: program (CLASS) ->  CLASS ident LBRACE RBRACE
     {344, 1}, // 5: location_list ->  location
     {344, 3}, // 6: location_list (COMMA) ->  location_list COMMA location
     {345, 1}, // 7: field_decl_list ->  field_decl
     {345, 2}, // 8: field_decl_list ->  field_decl_list field_decl
     {346, 3}, // 9: field_decl (SEMI) ->  type location_list SEMI
     {347, 1}, // 10: method_decl_list ->  method_decl
     {347, 2}, // 11: method_decl_list ->  method_decl_list method_decl
     {348, 1}, // 12: argument_decl_list ->  argument_decl
     {348, 3}, // 13: argument_decl_list (COMMA) ->  argument_decl_list COMMA argument_decl
     {349, 2}, // 14: argument_decl ->  type ident
     {350, 6}, // 15: method_decl (LPAREN) ->  type ident LPAREN argument_decl_list RPAREN block
     {350, 5}, // 16: method_decl (LPAREN) ->  type ident LPAREN RPAREN block
     {351, 4}, // 17: block (LBRACE) ->  LBRACE var_decl_list statement_list RBRACE
     {351, 3}, // 18: block (LBRACE) ->  LBRACE statement_list RBRACE
     {351, 3}, // 19: block (LBRACE) ->  LBRACE var_decl_list RBRACE
     {351, 2}, // 20: block (LBRACE) ->  LBRACE RBRACE
     {352, 1}, // 21: var_decl_list ->  var_decl
     {352, 2}, // 22: var_decl_list ->  var_decl_list var_decl
     {353, 3}, // 23: var_decl (SEMI) ->  type ident_list SEMI
     {354, 1}, // 24: statement_list ->  statement
     {354, 2}, // 25: statement_list ->  statement_list statement
     {355, 1}, // 26: type (INTTYPE) ->  INTTYPE
     {355, 1}, // 27: type (BOOLTYPE) ->  BOOLTYPE
     {355, 1}, // 28: type (DOUBLETYPE) ->  DOUBLETYPE
     {355, 1}, // 29: type (STRINGTYPE) ->  STRINGTYPE
     {355, 1}, // 30: type (VOID) ->  VOID
     {356, 1}, // 31: ident_list ->  ident
     {356, 3}, // 32: ident_list (COMMA) ->  ident_list COMMA ident
     {357, 1}, // 33: ident (IDENTIFIER) ->  IDENTIFIER
     {358, 5}, // 34: statement (IF) ->  IF LPAREN expr RPAREN block
     {358, 7}, // 35: statement (IF) ->  IF LPAREN expr RPAREN block ELSE block
     {358, 7}, // 36: statement (FOR) ->  FOR ident EQUAL expr COMMA expr block
     {358, 5}, // 37: statement (WHILE) ->  WHILE LPAREN expr RPAREN block
     {358, 2}, // 38: statement (RETURN) ->  RETURN SEMI
     {358, 3}, // 39: statement (RETURN) ->  RETURN expr SEMI
     {358, 2}, // 40: statement (BREAK) ->  BREAK SEMI
     {358, 2}, // 41: statement (CONTINUE) ->  CONTINUE SEMI
     {358, 2}, // 42: statement (SEMI) ->  expr SEMI
     {358, 3}, // 43: statement (GOTO) ->  GOTO ident SEMI
     {358, 2}, // 44: statement (COLON) ->  ident COLON
     {358, 1}, // 45: statement ->  block
     {359, 1}, // 46: assign_op (EQUAL) ->  EQUAL
     {359, 1}, // 47: assign_op (PLUSEQUAL) ->  PLUSEQUAL
     {359, 1}, // 48: assign_op (MINUSEQUAL) ->  MINUSEQUAL
     {360, 4}, // 49: method_call (LPAREN) ->  ident LPAREN expr_list RPAREN
     {360, 3}, // 50: method_call (LPAREN) ->  ident LPAREN RPAREN
     {360, 6}, // 51: method_call (CALLOUT) ->  CALLOUT LPAREN string_literal COMMA expr_list RPAREN
     {360, 4}, // 52: method_call (CALLOUT) ->  CALLOUT LPAREN string_literal RPAREN
     {361, 1}, // 53: location ->  ident
     {361, 4}, // 54: location (LBRACKET) ->  ident LBRACKET expr RBRACKET
     {362, 1}, // 55: primary_expr ->  location
     {362, 1}, // 56: primary_expr ->  literal
     {362, 1}, // 57: primary_expr ->  string_literal
     {362, 1}, // 58: primary_expr ->  method_call
     {362, 3}, // 59: primary_expr (LPAREN) ->  LPAREN expr RPAREN
     {363, 1}, // 60: unary_expr ->  primary_expr
     {363, 2}, // 61: unary_expr (MINUS) ->  MINUS unary_expr
     {363, 2}, // 62: unary_expr (BANG) ->  BANG unary_expr
     {364, 1}, // 63: mult_expr ->  unary_expr
     {364, 3}, // 64: mult_expr (MUL) ->  mult_expr MUL unary_expr
     {364, 3}, // 65: mult_expr (DIV) ->  mult_expr DIV unary_expr
     {364, 3}, // 66: mult_expr (MOD) ->  mult_expr MOD unary_expr
     {365, 1}, // 67: add_expr ->  mult_expr
     {365, 3}, // 68: add_expr (PLUS) ->  add_expr PLUS mult_expr
     {365, 3}, // 69: add_expr (MINUS) ->  add_expr MINUS mult_expr
     {366, 1}, // 70: rel_expr ->  add_expr
     {366, 3}, // 71: rel_expr ->  rel_expr rel_op add_expr
     {367, 1}, // 72: logic_expr ->  rel_expr
     {367, 3}, // 73: logic_expr ->  logic_expr logic_op rel_expr
     {368, 1}, // 74: assign_expr ->  logic_expr
     {368, 3}, // 75: assign_expr ->  assign_expr assign_op logic_expr
     {369, 1}, // 76: expr ->  assign_expr
     {370, 1}, // 77: expr_list ->  expr
     {370, 3}, // 78: expr_list (COMMA) ->  expr_list COMMA expr
     {371, 1}, // 79: rel_op (CLT) ->  CLT
     {371, 1}, // 80: rel_op (CGT) ->  CGT
     {371, 1}, // 81: rel_op (CLE) ->  CLE
     {371, 1}, // 82: rel_op (CGE) ->  CGE
     {371, 1}, // 83: rel_op (CEQ) ->  CEQ
     {371, 1}, // 84: rel_op (CNE) ->  CNE
     {372, 1}, // 85: logic_op (LAND) ->  LAND
     {372, 1}, // 86: logic_op (LOR) ->  LOR
     {373, 1}, // 87: literal (INTEGER) ->  INTEGER
     {373, 1}, // 88: literal (BOOLEAN) ->  BOOLEAN
     {373, 1}, // 89: literal (CHARACTER) ->  CHARACTER
     {373, 1}, // 90: literal (DOUBLE) ->  DOUBLE
     {373, 1}, // 91: literal (NULLVALUE) ->  NULLVALUE
     {374, 1}, // 92: string_literal (STRING) ->  STRING
     {375, 1}, // 93: program_$ ->  program
};

// State info and SR__ transitions for each state.


SR__ s_0[] =
{
    { { REQ_TOKEN}, { 3} },           
    { {       343}, { 1} }, // program
    { {       263}, { 2} }, // CLASS  
    { {         0}, { 0} },           
};

SR__ s_1[] =
{
    { { REQ_TOKEN}, {            2} }, 
    { {     _EOF_}, { PARSE_ACCEPT} }, 
    { {         0}, {            0} }, 
};

SR__ s_2[] =
{
    { { REQ_TOKEN}, { 3} },              
    { {       357}, { 3} }, // ident     
    { {       278}, { 4} }, // IDENTIFIER
    { {         0}, { 0} },              
};

SR__ s_3[] =
{
    { { REQ_TOKEN}, { 2} },          
    { {       289}, { 5} }, // LBRACE
    { {         0}, { 0} },          
};

SR__ s_4[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -33} }, 
};

SR__ s_5[] =
{
    { { REQ_TOKEN}, { 12} },                    
    { {       345}, {  6} }, // field_decl_list 
    { {       347}, {  7} }, // method_decl_list
    { {       290}, {  8} }, // RBRACE          
    { {       346}, {  9} }, // field_decl      
    { {       350}, { 10} }, // method_decl     
    { {       355}, { 11} }, // type            
    { {       260}, { 12} }, // INTTYPE         
    { {       259}, { 13} }, // BOOLTYPE        
    { {       261}, { 14} }, // DOUBLETYPE      
    { {       262}, { 15} }, // STRINGTYPE      
    { {       264}, { 16} }, // VOID            
    { {         0}, {  0} },                    
};

SR__ s_6[] =
{
    { { REQ_TOKEN}, { 11} },                    
    { {       347}, { 17} }, // method_decl_list
    { {       290}, { 18} }, // RBRACE          
    { {       346}, { 19} }, // field_decl      
    { {       350}, { 10} }, // method_decl     
    { {       355}, { 11} }, // type            
    { {       260}, { 12} }, // INTTYPE         
    { {       259}, { 13} }, // BOOLTYPE        
    { {       261}, { 14} }, // DOUBLETYPE      
    { {       262}, { 15} }, // STRINGTYPE      
    { {       264}, { 16} }, // VOID            
    { {         0}, {  0} },                    
};

SR__ s_7[] =
{
    { { REQ_TOKEN}, {  9} },               
    { {       290}, { 20} }, // RBRACE     
    { {       350}, { 21} }, // method_decl
    { {       355}, { 22} }, // type       
    { {       260}, { 12} }, // INTTYPE    
    { {       259}, { 13} }, // BOOLTYPE   
    { {       261}, { 14} }, // DOUBLETYPE 
    { {       262}, { 15} }, // STRINGTYPE 
    { {       264}, { 16} }, // VOID       
    { {         0}, {  0} },               
};

SR__ s_8[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -4} }, 
};

SR__ s_9[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -7} }, 
};

SR__ s_10[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -10} }, 
};

SR__ s_11[] =
{
    { { REQ_TOKEN}, {  5} },                 
    { {       344}, { 23} }, // location_list
    { {       357}, { 24} }, // ident        
    { {       361}, { 25} }, // location     
    { {       278}, {  4} }, // IDENTIFIER   
    { {         0}, {  0} },                 
};

SR__ s_12[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -26} }, 
};

SR__ s_13[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -27} }, 
};

SR__ s_14[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -28} }, 
};

SR__ s_15[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -29} }, 
};

SR__ s_16[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -30} }, 
};

SR__ s_17[] =
{
    { { REQ_TOKEN}, {  9} },               
    { {       290}, { 26} }, // RBRACE     
    { {       350}, { 21} }, // method_decl
    { {       355}, { 22} }, // type       
    { {       260}, { 12} }, // INTTYPE    
    { {       259}, { 13} }, // BOOLTYPE   
    { {       261}, { 14} }, // DOUBLETYPE 
    { {       262}, { 15} }, // STRINGTYPE 
    { {       264}, { 16} }, // VOID       
    { {         0}, {  0} },               
};

SR__ s_18[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -2} }, 
};

SR__ s_19[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -8} }, 
};

SR__ s_20[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -3} }, 
};

SR__ s_21[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -11} }, 
};

SR__ s_22[] =
{
    { { REQ_TOKEN}, {  3} },              
    { {       357}, { 27} }, // ident     
    { {       278}, {  4} }, // IDENTIFIER
    { {         0}, {  0} },              
};

SR__ s_23[] =
{
    { { REQ_TOKEN}, {  3} },         
    { {       294}, { 28} }, // SEMI 
    { {       293}, { 29} }, // COMMA
    { {         0}, {  0} },         
};

SR__ s_24[] =
{
    { { REQ_DEF}, {   3} },            
    { {     287}, {  30} }, // LPAREN  
    { {     291}, {  31} }, // LBRACKET
    { {       0}, { -53} },            
};

SR__ s_25[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -5} }, 
};

SR__ s_26[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -1} }, 
};

SR__ s_27[] =
{
    { { REQ_TOKEN}, {  2} },          
    { {       287}, { 30} }, // LPAREN
    { {         0}, {  0} },          
};

SR__ s_28[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -9} }, 
};

SR__ s_29[] =
{
    { { REQ_TOKEN}, {  4} },              
    { {       361}, { 32} }, // location  
    { {       357}, { 33} }, // ident     
    { {       278}, {  4} }, // IDENTIFIER
    { {         0}, {  0} },              
};

SR__ s_30[] =
{
    { { REQ_TOKEN}, { 10} },                      
    { {       348}, { 34} }, // argument_decl_list
    { {       288}, { 35} }, // RPAREN            
    { {       349}, { 36} }, // argument_decl     
    { {       355}, { 37} }, // type              
    { {       260}, { 12} }, // INTTYPE           
    { {       259}, { 13} }, // BOOLTYPE          
    { {       261}, { 14} }, // DOUBLETYPE        
    { {       262}, { 15} }, // STRINGTYPE        
    { {       264}, { 16} }, // VOID              
    { {         0}, {  0} },                      
};

SR__ s_31[] =
{
    { { REQ_TOKEN}, { 25} },                  
    { {       369}, { 38} }, // expr          
    { {       368}, { 39} }, // assign_expr   
    { {       367}, { 40} }, // logic_expr    
    { {       366}, { 41} }, // rel_expr      
    { {       365}, { 42} }, // add_expr      
    { {       364}, { 43} }, // mult_expr     
    { {       363}, { 44} }, // unary_expr    
    { {       362}, { 45} }, // primary_expr  
    { {       302}, { 46} }, // MINUS         
    { {       295}, { 47} }, // BANG          
    { {       361}, { 48} }, // location      
    { {       373}, { 49} }, // literal       
    { {       374}, { 50} }, // string_literal
    { {       360}, { 51} }, // method_call   
    { {       287}, { 52} }, // LPAREN        
    { {       357}, { 53} }, // ident         
    { {       279}, { 54} }, // INTEGER       
    { {       280}, { 55} }, // BOOLEAN       
    { {       281}, { 56} }, // CHARACTER     
    { {       283}, { 57} }, // DOUBLE        
    { {       273}, { 58} }, // NULLVALUE     
    { {       282}, { 59} }, // STRING        
    { {       258}, { 60} }, // CALLOUT       
    { {       278}, {  4} }, // IDENTIFIER    
    { {         0}, {  0} },                  
};

SR__ s_32[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -6} }, 
};

SR__ s_33[] =
{
    { { REQ_DEF}, {   2} },            
    { {     291}, {  31} }, // LBRACKET
    { {       0}, { -53} },            
};

SR__ s_34[] =
{
    { { REQ_TOKEN}, {  3} },          
    { {       288}, { 61} }, // RPAREN
    { {       293}, { 62} }, // COMMA 
    { {         0}, {  0} },          
};

SR__ s_35[] =
{
    { { REQ_TOKEN}, {  3} },          
    { {       351}, { 63} }, // block 
    { {       289}, { 64} }, // LBRACE
    { {         0}, {  0} },          
};

SR__ s_36[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -12} }, 
};

SR__ s_37[] =
{
    { { REQ_TOKEN}, {  3} },              
    { {       357}, { 65} }, // ident     
    { {       278}, {  4} }, // IDENTIFIER
    { {         0}, {  0} },              
};

SR__ s_38[] =
{
    { { REQ_TOKEN}, {  2} },            
    { {       292}, { 66} }, // RBRACKET
    { {         0}, {  0} },            
};

SR__ s_39[] =
{
    { { REQ_DEF}, {   5} },              
    { {     359}, {  67} }, // assign_op 
    { {     284}, {  68} }, // EQUAL     
    { {     285}, {  69} }, // PLUSEQUAL 
    { {     286}, {  70} }, // MINUSEQUAL
    { {       0}, { -76} },              
};

SR__ s_40[] =
{
    { { REQ_DEF}, {   4} },            
    { {     372}, {  71} }, // logic_op
    { {     300}, {  72} }, // LAND    
    { {     299}, {  73} }, // LOR     
    { {       0}, { -74} },            
};

SR__ s_41[] =
{
    { { REQ_DEF}, {   8} },          
    { {     371}, {  74} }, // rel_op
    { {     305}, {  75} }, // CLT   
    { {     307}, {  76} }, // CGT   
    { {     306}, {  77} }, // CLE   
    { {     308}, {  78} }, // CGE   
    { {     303}, {  79} }, // CEQ   
    { {     304}, {  80} }, // CNE   
    { {       0}, { -72} },          
};

SR__ s_42[] =
{
    { { REQ_DEF}, {   3} },         
    { {     301}, {  81} }, // PLUS 
    { {     302}, {  82} }, // MINUS
    { {       0}, { -70} },         
};

SR__ s_43[] =
{
    { { REQ_DEF}, {   4} },       
    { {     309}, {  83} }, // MUL
    { {     310}, {  84} }, // DIV
    { {     298}, {  85} }, // MOD
    { {       0}, { -67} },       
};

SR__ s_44[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -63} }, 
};

SR__ s_45[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -60} }, 
};

SR__ s_46[] =
{
    { { REQ_TOKEN}, { 19} },                  
    { {       363}, { 86} }, // unary_expr    
    { {       362}, { 45} }, // primary_expr  
    { {       302}, { 46} }, // MINUS         
    { {       295}, { 47} }, // BANG          
    { {       361}, { 48} }, // location      
    { {       373}, { 49} }, // literal       
    { {       374}, { 50} }, // string_literal
    { {       360}, { 51} }, // method_call   
    { {       287}, { 52} }, // LPAREN        
    { {       357}, { 53} }, // ident         
    { {       279}, { 54} }, // INTEGER       
    { {       280}, { 55} }, // BOOLEAN       
    { {       281}, { 56} }, // CHARACTER     
    { {       283}, { 57} }, // DOUBLE        
    { {       273}, { 58} }, // NULLVALUE     
    { {       282}, { 59} }, // STRING        
    { {       258}, { 60} }, // CALLOUT       
    { {       278}, {  4} }, // IDENTIFIER    
    { {         0}, {  0} },                  
};

SR__ s_47[] =
{
    { { REQ_TOKEN}, { 19} },                  
    { {       363}, { 87} }, // unary_expr    
    { {       362}, { 45} }, // primary_expr  
    { {       302}, { 46} }, // MINUS         
    { {       295}, { 47} }, // BANG          
    { {       361}, { 48} }, // location      
    { {       373}, { 49} }, // literal       
    { {       374}, { 50} }, // string_literal
    { {       360}, { 51} }, // method_call   
    { {       287}, { 52} }, // LPAREN        
    { {       357}, { 53} }, // ident         
    { {       279}, { 54} }, // INTEGER       
    { {       280}, { 55} }, // BOOLEAN       
    { {       281}, { 56} }, // CHARACTER     
    { {       283}, { 57} }, // DOUBLE        
    { {       273}, { 58} }, // NULLVALUE     
    { {       282}, { 59} }, // STRING        
    { {       258}, { 60} }, // CALLOUT       
    { {       278}, {  4} }, // IDENTIFIER    
    { {         0}, {  0} },                  
};

SR__ s_48[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -55} }, 
};

SR__ s_49[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -56} }, 
};

SR__ s_50[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -57} }, 
};

SR__ s_51[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -58} }, 
};

SR__ s_52[] =
{
    { { REQ_TOKEN}, { 25} },                  
    { {       369}, { 88} }, // expr          
    { {       368}, { 39} }, // assign_expr   
    { {       367}, { 40} }, // logic_expr    
    { {       366}, { 41} }, // rel_expr      
    { {       365}, { 42} }, // add_expr      
    { {       364}, { 43} }, // mult_expr     
    { {       363}, { 44} }, // unary_expr    
    { {       362}, { 45} }, // primary_expr  
    { {       302}, { 46} }, // MINUS         
    { {       295}, { 47} }, // BANG          
    { {       361}, { 48} }, // location      
    { {       373}, { 49} }, // literal       
    { {       374}, { 50} }, // string_literal
    { {       360}, { 51} }, // method_call   
    { {       287}, { 52} }, // LPAREN        
    { {       357}, { 53} }, // ident         
    { {       279}, { 54} }, // INTEGER       
    { {       280}, { 55} }, // BOOLEAN       
    { {       281}, { 56} }, // CHARACTER     
    { {       283}, { 57} }, // DOUBLE        
    { {       273}, { 58} }, // NULLVALUE     
    { {       282}, { 59} }, // STRING        
    { {       258}, { 60} }, // CALLOUT       
    { {       278}, {  4} }, // IDENTIFIER    
    { {         0}, {  0} },                  
};

SR__ s_53[] =
{
    { { REQ_DEF}, {   3} },            
    { {     291}, {  31} }, // LBRACKET
    { {     287}, {  89} }, // LPAREN  
    { {       0}, { -53} },            
};

SR__ s_54[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -87} }, 
};

SR__ s_55[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -88} }, 
};

SR__ s_56[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -89} }, 
};

SR__ s_57[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -90} }, 
};

SR__ s_58[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -91} }, 
};

SR__ s_59[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -92} }, 
};

SR__ s_60[] =
{
    { { REQ_TOKEN}, {  2} },          
    { {       287}, { 90} }, // LPAREN
    { {         0}, {  0} },          
};

SR__ s_61[] =
{
    { { REQ_TOKEN}, {  3} },          
    { {       351}, { 91} }, // block 
    { {       289}, { 64} }, // LBRACE
    { {         0}, {  0} },          
};

SR__ s_62[] =
{
    { { REQ_TOKEN}, {  8} },                 
    { {       349}, { 92} }, // argument_decl
    { {       355}, { 37} }, // type         
    { {       260}, { 12} }, // INTTYPE      
    { {       259}, { 13} }, // BOOLTYPE     
    { {       261}, { 14} }, // DOUBLETYPE   
    { {       262}, { 15} }, // STRINGTYPE   
    { {       264}, { 16} }, // VOID         
    { {         0}, {  0} },                 
};

SR__ s_63[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -16} }, 
};

SR__ s_64[] =
{
    { { REQ_TOKEN}, {  45} },                  
    { {       352}, {  93} }, // var_decl_list 
    { {       354}, {  94} }, // statement_list
    { {       290}, {  95} }, // RBRACE        
    { {       353}, {  96} }, // var_decl      
    { {       358}, {  97} }, // statement     
    { {       355}, {  98} }, // type          
    { {       265}, {  99} }, // IF            
    { {       267}, { 100} }, // FOR           
    { {       271}, { 101} }, // WHILE         
    { {       257}, { 102} }, // RETURN        
    { {       269}, { 103} }, // BREAK         
    { {       268}, { 104} }, // CONTINUE      
    { {       369}, { 105} }, // expr          
    { {       270}, { 106} }, // GOTO          
    { {       357}, { 107} }, // ident         
    { {       351}, { 108} }, // block         
    { {       260}, {  12} }, // INTTYPE       
    { {       259}, {  13} }, // BOOLTYPE      
    { {       261}, {  14} }, // DOUBLETYPE    
    { {       262}, {  15} }, // STRINGTYPE    
    { {       264}, {  16} }, // VOID          
    { {       368}, {  39} }, // assign_expr   
    { {       278}, {   4} }, // IDENTIFIER    
    { {       289}, {  64} }, // LBRACE        
    { {       367}, {  40} }, // logic_expr    
    { {       366}, {  41} }, // rel_expr      
    { {       365}, {  42} }, // add_expr      
    { {       364}, {  43} }, // mult_expr     
    { {       363}, {  44} }, // unary_expr    
    { {       362}, {  45} }, // primary_expr  
    { {       302}, {  46} }, // MINUS         
    { {       295}, {  47} }, // BANG          
    { {       361}, {  48} }, // location      
    { {       373}, {  49} }, // literal       
    { {       374}, {  50} }, // string_literal
    { {       360}, {  51} }, // method_call   
    { {       287}, {  52} }, // LPAREN        
    { {       279}, {  54} }, // INTEGER       
    { {       280}, {  55} }, // BOOLEAN       
    { {       281}, {  56} }, // CHARACTER     
    { {       283}, {  57} }, // DOUBLE        
    { {       273}, {  58} }, // NULLVALUE     
    { {       282}, {  59} }, // STRING        
    { {       258}, {  60} }, // CALLOUT       
    { {         0}, {   0} },                  
};

SR__ s_65[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -14} }, 
};

SR__ s_66[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -54} }, 
};

SR__ s_67[] =
{
    { { REQ_TOKEN}, {  23} },                  
    { {       367}, { 109} }, // logic_expr    
    { {       366}, {  41} }, // rel_expr      
    { {       365}, {  42} }, // add_expr      
    { {       364}, {  43} }, // mult_expr     
    { {       363}, {  44} }, // unary_expr    
    { {       362}, {  45} }, // primary_expr  
    { {       302}, {  46} }, // MINUS         
    { {       295}, {  47} }, // BANG          
    { {       361}, {  48} }, // location      
    { {       373}, {  49} }, // literal       
    { {       374}, {  50} }, // string_literal
    { {       360}, {  51} }, // method_call   
    { {       287}, {  52} }, // LPAREN        
    { {       357}, {  53} }, // ident         
    { {       279}, {  54} }, // INTEGER       
    { {       280}, {  55} }, // BOOLEAN       
    { {       281}, {  56} }, // CHARACTER     
    { {       283}, {  57} }, // DOUBLE        
    { {       273}, {  58} }, // NULLVALUE     
    { {       282}, {  59} }, // STRING        
    { {       258}, {  60} }, // CALLOUT       
    { {       278}, {   4} }, // IDENTIFIER    
    { {         0}, {   0} },                  
};

SR__ s_68[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -46} }, 
};

SR__ s_69[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -47} }, 
};

SR__ s_70[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -48} }, 
};

SR__ s_71[] =
{
    { { REQ_TOKEN}, {  22} },                  
    { {       366}, { 110} }, // rel_expr      
    { {       365}, {  42} }, // add_expr      
    { {       364}, {  43} }, // mult_expr     
    { {       363}, {  44} }, // unary_expr    
    { {       362}, {  45} }, // primary_expr  
    { {       302}, {  46} }, // MINUS         
    { {       295}, {  47} }, // BANG          
    { {       361}, {  48} }, // location      
    { {       373}, {  49} }, // literal       
    { {       374}, {  50} }, // string_literal
    { {       360}, {  51} }, // method_call   
    { {       287}, {  52} }, // LPAREN        
    { {       357}, {  53} }, // ident         
    { {       279}, {  54} }, // INTEGER       
    { {       280}, {  55} }, // BOOLEAN       
    { {       281}, {  56} }, // CHARACTER     
    { {       283}, {  57} }, // DOUBLE        
    { {       273}, {  58} }, // NULLVALUE     
    { {       282}, {  59} }, // STRING        
    { {       258}, {  60} }, // CALLOUT       
    { {       278}, {   4} }, // IDENTIFIER    
    { {         0}, {   0} },                  
};

SR__ s_72[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -85} }, 
};

SR__ s_73[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -86} }, 
};

SR__ s_74[] =
{
    { { REQ_TOKEN}, {  21} },                  
    { {       365}, { 111} }, // add_expr      
    { {       364}, {  43} }, // mult_expr     
    { {       363}, {  44} }, // unary_expr    
    { {       362}, {  45} }, // primary_expr  
    { {       302}, {  46} }, // MINUS         
    { {       295}, {  47} }, // BANG          
    { {       361}, {  48} }, // location      
    { {       373}, {  49} }, // literal       
    { {       374}, {  50} }, // string_literal
    { {       360}, {  51} }, // method_call   
    { {       287}, {  52} }, // LPAREN        
    { {       357}, {  53} }, // ident         
    { {       279}, {  54} }, // INTEGER       
    { {       280}, {  55} }, // BOOLEAN       
    { {       281}, {  56} }, // CHARACTER     
    { {       283}, {  57} }, // DOUBLE        
    { {       273}, {  58} }, // NULLVALUE     
    { {       282}, {  59} }, // STRING        
    { {       258}, {  60} }, // CALLOUT       
    { {       278}, {   4} }, // IDENTIFIER    
    { {         0}, {   0} },                  
};

SR__ s_75[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -79} }, 
};

SR__ s_76[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -80} }, 
};

SR__ s_77[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -81} }, 
};

SR__ s_78[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -82} }, 
};

SR__ s_79[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -83} }, 
};

SR__ s_80[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -84} }, 
};

SR__ s_81[] =
{
    { { REQ_TOKEN}, {  20} },                  
    { {       364}, { 112} }, // mult_expr     
    { {       363}, {  44} }, // unary_expr    
    { {       362}, {  45} }, // primary_expr  
    { {       302}, {  46} }, // MINUS         
    { {       295}, {  47} }, // BANG          
    { {       361}, {  48} }, // location      
    { {       373}, {  49} }, // literal       
    { {       374}, {  50} }, // string_literal
    { {       360}, {  51} }, // method_call   
    { {       287}, {  52} }, // LPAREN        
    { {       357}, {  53} }, // ident         
    { {       279}, {  54} }, // INTEGER       
    { {       280}, {  55} }, // BOOLEAN       
    { {       281}, {  56} }, // CHARACTER     
    { {       283}, {  57} }, // DOUBLE        
    { {       273}, {  58} }, // NULLVALUE     
    { {       282}, {  59} }, // STRING        
    { {       258}, {  60} }, // CALLOUT       
    { {       278}, {   4} }, // IDENTIFIER    
    { {         0}, {   0} },                  
};

SR__ s_82[] =
{
    { { REQ_TOKEN}, {  20} },                  
    { {       364}, { 113} }, // mult_expr     
    { {       363}, {  44} }, // unary_expr    
    { {       362}, {  45} }, // primary_expr  
    { {       302}, {  46} }, // MINUS         
    { {       295}, {  47} }, // BANG          
    { {       361}, {  48} }, // location      
    { {       373}, {  49} }, // literal       
    { {       374}, {  50} }, // string_literal
    { {       360}, {  51} }, // method_call   
    { {       287}, {  52} }, // LPAREN        
    { {       357}, {  53} }, // ident         
    { {       279}, {  54} }, // INTEGER       
    { {       280}, {  55} }, // BOOLEAN       
    { {       281}, {  56} }, // CHARACTER     
    { {       283}, {  57} }, // DOUBLE        
    { {       273}, {  58} }, // NULLVALUE     
    { {       282}, {  59} }, // STRING        
    { {       258}, {  60} }, // CALLOUT       
    { {       278}, {   4} }, // IDENTIFIER    
    { {         0}, {   0} },                  
};

SR__ s_83[] =
{
    { { REQ_TOKEN}, {  19} },                  
    { {       363}, { 114} }, // unary_expr    
    { {       362}, {  45} }, // primary_expr  
    { {       302}, {  46} }, // MINUS         
    { {       295}, {  47} }, // BANG          
    { {       361}, {  48} }, // location      
    { {       373}, {  49} }, // literal       
    { {       374}, {  50} }, // string_literal
    { {       360}, {  51} }, // method_call   
    { {       287}, {  52} }, // LPAREN        
    { {       357}, {  53} }, // ident         
    { {       279}, {  54} }, // INTEGER       
    { {       280}, {  55} }, // BOOLEAN       
    { {       281}, {  56} }, // CHARACTER     
    { {       283}, {  57} }, // DOUBLE        
    { {       273}, {  58} }, // NULLVALUE     
    { {       282}, {  59} }, // STRING        
    { {       258}, {  60} }, // CALLOUT       
    { {       278}, {   4} }, // IDENTIFIER    
    { {         0}, {   0} },                  
};

SR__ s_84[] =
{
    { { REQ_TOKEN}, {  19} },                  
    { {       363}, { 115} }, // unary_expr    
    { {       362}, {  45} }, // primary_expr  
    { {       302}, {  46} }, // MINUS         
    { {       295}, {  47} }, // BANG          
    { {       361}, {  48} }, // location      
    { {       373}, {  49} }, // literal       
    { {       374}, {  50} }, // string_literal
    { {       360}, {  51} }, // method_call   
    { {       287}, {  52} }, // LPAREN        
    { {       357}, {  53} }, // ident         
    { {       279}, {  54} }, // INTEGER       
    { {       280}, {  55} }, // BOOLEAN       
    { {       281}, {  56} }, // CHARACTER     
    { {       283}, {  57} }, // DOUBLE        
    { {       273}, {  58} }, // NULLVALUE     
    { {       282}, {  59} }, // STRING        
    { {       258}, {  60} }, // CALLOUT       
    { {       278}, {   4} }, // IDENTIFIER    
    { {         0}, {   0} },                  
};

SR__ s_85[] =
{
    { { REQ_TOKEN}, {  19} },                  
    { {       363}, { 116} }, // unary_expr    
    { {       362}, {  45} }, // primary_expr  
    { {       302}, {  46} }, // MINUS         
    { {       295}, {  47} }, // BANG          
    { {       361}, {  48} }, // location      
    { {       373}, {  49} }, // literal       
    { {       374}, {  50} }, // string_literal
    { {       360}, {  51} }, // method_call   
    { {       287}, {  52} }, // LPAREN        
    { {       357}, {  53} }, // ident         
    { {       279}, {  54} }, // INTEGER       
    { {       280}, {  55} }, // BOOLEAN       
    { {       281}, {  56} }, // CHARACTER     
    { {       283}, {  57} }, // DOUBLE        
    { {       273}, {  58} }, // NULLVALUE     
    { {       282}, {  59} }, // STRING        
    { {       258}, {  60} }, // CALLOUT       
    { {       278}, {   4} }, // IDENTIFIER    
    { {         0}, {   0} },                  
};

SR__ s_86[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -61} }, 
};

SR__ s_87[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -62} }, 
};

SR__ s_88[] =
{
    { { REQ_TOKEN}, {   2} },          
    { {       288}, { 117} }, // RPAREN
    { {         0}, {   0} },          
};

SR__ s_89[] =
{
    { { REQ_TOKEN}, {  27} },                  
    { {       370}, { 118} }, // expr_list     
    { {       288}, { 119} }, // RPAREN        
    { {       369}, { 120} }, // expr          
    { {       368}, {  39} }, // assign_expr   
    { {       367}, {  40} }, // logic_expr    
    { {       366}, {  41} }, // rel_expr      
    { {       365}, {  42} }, // add_expr      
    { {       364}, {  43} }, // mult_expr     
    { {       363}, {  44} }, // unary_expr    
    { {       362}, {  45} }, // primary_expr  
    { {       302}, {  46} }, // MINUS         
    { {       295}, {  47} }, // BANG          
    { {       361}, {  48} }, // location      
    { {       373}, {  49} }, // literal       
    { {       374}, {  50} }, // string_literal
    { {       360}, {  51} }, // method_call   
    { {       287}, {  52} }, // LPAREN        
    { {       357}, {  53} }, // ident         
    { {       279}, {  54} }, // INTEGER       
    { {       280}, {  55} }, // BOOLEAN       
    { {       281}, {  56} }, // CHARACTER     
    { {       283}, {  57} }, // DOUBLE        
    { {       273}, {  58} }, // NULLVALUE     
    { {       282}, {  59} }, // STRING        
    { {       258}, {  60} }, // CALLOUT       
    { {       278}, {   4} }, // IDENTIFIER    
    { {         0}, {   0} },                  
};

SR__ s_90[] =
{
    { { REQ_TOKEN}, {   3} },                  
    { {       374}, { 121} }, // string_literal
    { {       282}, {  59} }, // STRING        
    { {         0}, {   0} },                  
};

SR__ s_91[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -15} }, 
};

SR__ s_92[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -13} }, 
};

SR__ s_93[] =
{
    { { REQ_TOKEN}, {  44} },                  
    { {       354}, { 122} }, // statement_list
    { {       290}, { 123} }, // RBRACE        
    { {       353}, { 124} }, // var_decl      
    { {       358}, {  97} }, // statement     
    { {       355}, {  98} }, // type          
    { {       265}, {  99} }, // IF            
    { {       267}, { 100} }, // FOR           
    { {       271}, { 101} }, // WHILE         
    { {       257}, { 102} }, // RETURN        
    { {       269}, { 103} }, // BREAK         
    { {       268}, { 104} }, // CONTINUE      
    { {       369}, { 105} }, // expr          
    { {       270}, { 106} }, // GOTO          
    { {       357}, { 107} }, // ident         
    { {       351}, { 108} }, // block         
    { {       260}, {  12} }, // INTTYPE       
    { {       259}, {  13} }, // BOOLTYPE      
    { {       261}, {  14} }, // DOUBLETYPE    
    { {       262}, {  15} }, // STRINGTYPE    
    { {       264}, {  16} }, // VOID          
    { {       368}, {  39} }, // assign_expr   
    { {       278}, {   4} }, // IDENTIFIER    
    { {       289}, {  64} }, // LBRACE        
    { {       367}, {  40} }, // logic_expr    
    { {       366}, {  41} }, // rel_expr      
    { {       365}, {  42} }, // add_expr      
    { {       364}, {  43} }, // mult_expr     
    { {       363}, {  44} }, // unary_expr    
    { {       362}, {  45} }, // primary_expr  
    { {       302}, {  46} }, // MINUS         
    { {       295}, {  47} }, // BANG          
    { {       361}, {  48} }, // location      
    { {       373}, {  49} }, // literal       
    { {       374}, {  50} }, // string_literal
    { {       360}, {  51} }, // method_call   
    { {       287}, {  52} }, // LPAREN        
    { {       279}, {  54} }, // INTEGER       
    { {       280}, {  55} }, // BOOLEAN       
    { {       281}, {  56} }, // CHARACTER     
    { {       283}, {  57} }, // DOUBLE        
    { {       273}, {  58} }, // NULLVALUE     
    { {       282}, {  59} }, // STRING        
    { {       258}, {  60} }, // CALLOUT       
    { {         0}, {   0} },                  
};

SR__ s_94[] =
{
    { { REQ_TOKEN}, {  36} },                  
    { {       290}, { 125} }, // RBRACE        
    { {       358}, { 126} }, // statement     
    { {       265}, {  99} }, // IF            
    { {       267}, { 100} }, // FOR           
    { {       271}, { 101} }, // WHILE         
    { {       257}, { 102} }, // RETURN        
    { {       269}, { 103} }, // BREAK         
    { {       268}, { 104} }, // CONTINUE      
    { {       369}, { 105} }, // expr          
    { {       270}, { 106} }, // GOTO          
    { {       357}, { 107} }, // ident         
    { {       351}, { 108} }, // block         
    { {       368}, {  39} }, // assign_expr   
    { {       278}, {   4} }, // IDENTIFIER    
    { {       289}, {  64} }, // LBRACE        
    { {       367}, {  40} }, // logic_expr    
    { {       366}, {  41} }, // rel_expr      
    { {       365}, {  42} }, // add_expr      
    { {       364}, {  43} }, // mult_expr     
    { {       363}, {  44} }, // unary_expr    
    { {       362}, {  45} }, // primary_expr  
    { {       302}, {  46} }, // MINUS         
    { {       295}, {  47} }, // BANG          
    { {       361}, {  48} }, // location      
    { {       373}, {  49} }, // literal       
    { {       374}, {  50} }, // string_literal
    { {       360}, {  51} }, // method_call   
    { {       287}, {  52} }, // LPAREN        
    { {       279}, {  54} }, // INTEGER       
    { {       280}, {  55} }, // BOOLEAN       
    { {       281}, {  56} }, // CHARACTER     
    { {       283}, {  57} }, // DOUBLE        
    { {       273}, {  58} }, // NULLVALUE     
    { {       282}, {  59} }, // STRING        
    { {       258}, {  60} }, // CALLOUT       
    { {         0}, {   0} },                  
};

SR__ s_95[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -20} }, 
};

SR__ s_96[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -21} }, 
};

SR__ s_97[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -24} }, 
};

SR__ s_98[] =
{
    { { REQ_TOKEN}, {   4} },              
    { {       356}, { 127} }, // ident_list
    { {       357}, { 128} }, // ident     
    { {       278}, {   4} }, // IDENTIFIER
    { {         0}, {   0} },              
};

SR__ s_99[] =
{
    { { REQ_TOKEN}, {   2} },          
    { {       287}, { 129} }, // LPAREN
    { {         0}, {   0} },          
};

SR__ s_100[] =
{
    { { REQ_TOKEN}, {   3} },              
    { {       357}, { 130} }, // ident     
    { {       278}, {   4} }, // IDENTIFIER
    { {         0}, {   0} },              
};

SR__ s_101[] =
{
    { { REQ_TOKEN}, {   2} },          
    { {       287}, { 131} }, // LPAREN
    { {         0}, {   0} },          
};

SR__ s_102[] =
{
    { { REQ_TOKEN}, {  26} },                  
    { {       294}, { 132} }, // SEMI          
    { {       369}, { 133} }, // expr          
    { {       368}, {  39} }, // assign_expr   
    { {       367}, {  40} }, // logic_expr    
    { {       366}, {  41} }, // rel_expr      
    { {       365}, {  42} }, // add_expr      
    { {       364}, {  43} }, // mult_expr     
    { {       363}, {  44} }, // unary_expr    
    { {       362}, {  45} }, // primary_expr  
    { {       302}, {  46} }, // MINUS         
    { {       295}, {  47} }, // BANG          
    { {       361}, {  48} }, // location      
    { {       373}, {  49} }, // literal       
    { {       374}, {  50} }, // string_literal
    { {       360}, {  51} }, // method_call   
    { {       287}, {  52} }, // LPAREN        
    { {       357}, {  53} }, // ident         
    { {       279}, {  54} }, // INTEGER       
    { {       280}, {  55} }, // BOOLEAN       
    { {       281}, {  56} }, // CHARACTER     
    { {       283}, {  57} }, // DOUBLE        
    { {       273}, {  58} }, // NULLVALUE     
    { {       282}, {  59} }, // STRING        
    { {       258}, {  60} }, // CALLOUT       
    { {       278}, {   4} }, // IDENTIFIER    
    { {         0}, {   0} },                  
};

SR__ s_103[] =
{
    { { REQ_TOKEN}, {   2} },        
    { {       294}, { 134} }, // SEMI
    { {         0}, {   0} },        
};

SR__ s_104[] =
{
    { { REQ_TOKEN}, {   2} },        
    { {       294}, { 135} }, // SEMI
    { {         0}, {   0} },        
};

SR__ s_105[] =
{
    { { REQ_TOKEN}, {   2} },        
    { {       294}, { 136} }, // SEMI
    { {         0}, {   0} },        
};

SR__ s_106[] =
{
    { { REQ_TOKEN}, {   3} },              
    { {       357}, { 137} }, // ident     
    { {       278}, {   4} }, // IDENTIFIER
    { {         0}, {   0} },              
};

SR__ s_107[] =
{
    { { REQ_DEF}, {   4} },            
    { {     296}, { 138} }, // COLON   
    { {     291}, {  31} }, // LBRACKET
    { {     287}, {  89} }, // LPAREN  
    { {       0}, { -53} },            
};

SR__ s_108[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -45} }, 
};

SR__ s_109[] =
{
    { { REQ_DEF}, {   4} },            
    { {     372}, {  71} }, // logic_op
    { {     300}, {  72} }, // LAND    
    { {     299}, {  73} }, // LOR     
    { {       0}, { -75} },            
};

SR__ s_110[] =
{
    { { REQ_DEF}, {   8} },          
    { {     371}, {  74} }, // rel_op
    { {     305}, {  75} }, // CLT   
    { {     307}, {  76} }, // CGT   
    { {     306}, {  77} }, // CLE   
    { {     308}, {  78} }, // CGE   
    { {     303}, {  79} }, // CEQ   
    { {     304}, {  80} }, // CNE   
    { {       0}, { -73} },          
};

SR__ s_111[] =
{
    { { REQ_DEF}, {   3} },         
    { {     301}, {  81} }, // PLUS 
    { {     302}, {  82} }, // MINUS
    { {       0}, { -71} },         
};

SR__ s_112[] =
{
    { { REQ_DEF}, {   4} },       
    { {     309}, {  83} }, // MUL
    { {     310}, {  84} }, // DIV
    { {     298}, {  85} }, // MOD
    { {       0}, { -68} },       
};

SR__ s_113[] =
{
    { { REQ_DEF}, {   4} },       
    { {     309}, {  83} }, // MUL
    { {     310}, {  84} }, // DIV
    { {     298}, {  85} }, // MOD
    { {       0}, { -69} },       
};

SR__ s_114[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -64} }, 
};

SR__ s_115[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -65} }, 
};

SR__ s_116[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -66} }, 
};

SR__ s_117[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -59} }, 
};

SR__ s_118[] =
{
    { { REQ_TOKEN}, {   3} },          
    { {       288}, { 139} }, // RPAREN
    { {       293}, { 140} }, // COMMA 
    { {         0}, {   0} },          
};

SR__ s_119[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -50} }, 
};

SR__ s_120[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -77} }, 
};

SR__ s_121[] =
{
    { { REQ_TOKEN}, {   3} },          
    { {       293}, { 141} }, // COMMA 
    { {       288}, { 142} }, // RPAREN
    { {         0}, {   0} },          
};

SR__ s_122[] =
{
    { { REQ_TOKEN}, {  36} },                  
    { {       290}, { 143} }, // RBRACE        
    { {       358}, { 126} }, // statement     
    { {       265}, {  99} }, // IF            
    { {       267}, { 100} }, // FOR           
    { {       271}, { 101} }, // WHILE         
    { {       257}, { 102} }, // RETURN        
    { {       269}, { 103} }, // BREAK         
    { {       268}, { 104} }, // CONTINUE      
    { {       369}, { 105} }, // expr          
    { {       270}, { 106} }, // GOTO          
    { {       357}, { 107} }, // ident         
    { {       351}, { 108} }, // block         
    { {       368}, {  39} }, // assign_expr   
    { {       278}, {   4} }, // IDENTIFIER    
    { {       289}, {  64} }, // LBRACE        
    { {       367}, {  40} }, // logic_expr    
    { {       366}, {  41} }, // rel_expr      
    { {       365}, {  42} }, // add_expr      
    { {       364}, {  43} }, // mult_expr     
    { {       363}, {  44} }, // unary_expr    
    { {       362}, {  45} }, // primary_expr  
    { {       302}, {  46} }, // MINUS         
    { {       295}, {  47} }, // BANG          
    { {       361}, {  48} }, // location      
    { {       373}, {  49} }, // literal       
    { {       374}, {  50} }, // string_literal
    { {       360}, {  51} }, // method_call   
    { {       287}, {  52} }, // LPAREN        
    { {       279}, {  54} }, // INTEGER       
    { {       280}, {  55} }, // BOOLEAN       
    { {       281}, {  56} }, // CHARACTER     
    { {       283}, {  57} }, // DOUBLE        
    { {       273}, {  58} }, // NULLVALUE     
    { {       282}, {  59} }, // STRING        
    { {       258}, {  60} }, // CALLOUT       
    { {         0}, {   0} },                  
};

SR__ s_123[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -19} }, 
};

SR__ s_124[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -22} }, 
};

SR__ s_125[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -18} }, 
};

SR__ s_126[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -25} }, 
};

SR__ s_127[] =
{
    { { REQ_TOKEN}, {   3} },         
    { {       294}, { 144} }, // SEMI 
    { {       293}, { 145} }, // COMMA
    { {         0}, {   0} },         
};

SR__ s_128[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -31} }, 
};

SR__ s_129[] =
{
    { { REQ_TOKEN}, {  25} },                  
    { {       369}, { 146} }, // expr          
    { {       368}, {  39} }, // assign_expr   
    { {       367}, {  40} }, // logic_expr    
    { {       366}, {  41} }, // rel_expr      
    { {       365}, {  42} }, // add_expr      
    { {       364}, {  43} }, // mult_expr     
    { {       363}, {  44} }, // unary_expr    
    { {       362}, {  45} }, // primary_expr  
    { {       302}, {  46} }, // MINUS         
    { {       295}, {  47} }, // BANG          
    { {       361}, {  48} }, // location      
    { {       373}, {  49} }, // literal       
    { {       374}, {  50} }, // string_literal
    { {       360}, {  51} }, // method_call   
    { {       287}, {  52} }, // LPAREN        
    { {       357}, {  53} }, // ident         
    { {       279}, {  54} }, // INTEGER       
    { {       280}, {  55} }, // BOOLEAN       
    { {       281}, {  56} }, // CHARACTER     
    { {       283}, {  57} }, // DOUBLE        
    { {       273}, {  58} }, // NULLVALUE     
    { {       282}, {  59} }, // STRING        
    { {       258}, {  60} }, // CALLOUT       
    { {       278}, {   4} }, // IDENTIFIER    
    { {         0}, {   0} },                  
};

SR__ s_130[] =
{
    { { REQ_TOKEN}, {   2} },         
    { {       284}, { 147} }, // EQUAL
    { {         0}, {   0} },         
};

SR__ s_131[] =
{
    { { REQ_TOKEN}, {  25} },                  
    { {       369}, { 148} }, // expr          
    { {       368}, {  39} }, // assign_expr   
    { {       367}, {  40} }, // logic_expr    
    { {       366}, {  41} }, // rel_expr      
    { {       365}, {  42} }, // add_expr      
    { {       364}, {  43} }, // mult_expr     
    { {       363}, {  44} }, // unary_expr    
    { {       362}, {  45} }, // primary_expr  
    { {       302}, {  46} }, // MINUS         
    { {       295}, {  47} }, // BANG          
    { {       361}, {  48} }, // location      
    { {       373}, {  49} }, // literal       
    { {       374}, {  50} }, // string_literal
    { {       360}, {  51} }, // method_call   
    { {       287}, {  52} }, // LPAREN        
    { {       357}, {  53} }, // ident         
    { {       279}, {  54} }, // INTEGER       
    { {       280}, {  55} }, // BOOLEAN       
    { {       281}, {  56} }, // CHARACTER     
    { {       283}, {  57} }, // DOUBLE        
    { {       273}, {  58} }, // NULLVALUE     
    { {       282}, {  59} }, // STRING        
    { {       258}, {  60} }, // CALLOUT       
    { {       278}, {   4} }, // IDENTIFIER    
    { {         0}, {   0} },                  
};

SR__ s_132[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -38} }, 
};

SR__ s_133[] =
{
    { { REQ_TOKEN}, {   2} },        
    { {       294}, { 149} }, // SEMI
    { {         0}, {   0} },        
};

SR__ s_134[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -40} }, 
};

SR__ s_135[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -41} }, 
};

SR__ s_136[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -42} }, 
};

SR__ s_137[] =
{
    { { REQ_TOKEN}, {   2} },        
    { {       294}, { 150} }, // SEMI
    { {         0}, {   0} },        
};

SR__ s_138[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -44} }, 
};

SR__ s_139[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -49} }, 
};

SR__ s_140[] =
{
    { { REQ_TOKEN}, {  25} },                  
    { {       369}, { 151} }, // expr          
    { {       368}, {  39} }, // assign_expr   
    { {       367}, {  40} }, // logic_expr    
    { {       366}, {  41} }, // rel_expr      
    { {       365}, {  42} }, // add_expr      
    { {       364}, {  43} }, // mult_expr     
    { {       363}, {  44} }, // unary_expr    
    { {       362}, {  45} }, // primary_expr  
    { {       302}, {  46} }, // MINUS         
    { {       295}, {  47} }, // BANG          
    { {       361}, {  48} }, // location      
    { {       373}, {  49} }, // literal       
    { {       374}, {  50} }, // string_literal
    { {       360}, {  51} }, // method_call   
    { {       287}, {  52} }, // LPAREN        
    { {       357}, {  53} }, // ident         
    { {       279}, {  54} }, // INTEGER       
    { {       280}, {  55} }, // BOOLEAN       
    { {       281}, {  56} }, // CHARACTER     
    { {       283}, {  57} }, // DOUBLE        
    { {       273}, {  58} }, // NULLVALUE     
    { {       282}, {  59} }, // STRING        
    { {       258}, {  60} }, // CALLOUT       
    { {       278}, {   4} }, // IDENTIFIER    
    { {         0}, {   0} },                  
};

SR__ s_141[] =
{
    { { REQ_TOKEN}, {  26} },                  
    { {       370}, { 152} }, // expr_list     
    { {       369}, { 120} }, // expr          
    { {       368}, {  39} }, // assign_expr   
    { {       367}, {  40} }, // logic_expr    
    { {       366}, {  41} }, // rel_expr      
    { {       365}, {  42} }, // add_expr      
    { {       364}, {  43} }, // mult_expr     
    { {       363}, {  44} }, // unary_expr    
    { {       362}, {  45} }, // primary_expr  
    { {       302}, {  46} }, // MINUS         
    { {       295}, {  47} }, // BANG          
    { {       361}, {  48} }, // location      
    { {       373}, {  49} }, // literal       
    { {       374}, {  50} }, // string_literal
    { {       360}, {  51} }, // method_call   
    { {       287}, {  52} }, // LPAREN        
    { {       357}, {  53} }, // ident         
    { {       279}, {  54} }, // INTEGER       
    { {       280}, {  55} }, // BOOLEAN       
    { {       281}, {  56} }, // CHARACTER     
    { {       283}, {  57} }, // DOUBLE        
    { {       273}, {  58} }, // NULLVALUE     
    { {       282}, {  59} }, // STRING        
    { {       258}, {  60} }, // CALLOUT       
    { {       278}, {   4} }, // IDENTIFIER    
    { {         0}, {   0} },                  
};

SR__ s_142[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -52} }, 
};

SR__ s_143[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -17} }, 
};

SR__ s_144[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -23} }, 
};

SR__ s_145[] =
{
    { { REQ_TOKEN}, {   3} },              
    { {       357}, { 153} }, // ident     
    { {       278}, {   4} }, // IDENTIFIER
    { {         0}, {   0} },              
};

SR__ s_146[] =
{
    { { REQ_TOKEN}, {   2} },          
    { {       288}, { 154} }, // RPAREN
    { {         0}, {   0} },          
};

SR__ s_147[] =
{
    { { REQ_TOKEN}, {  25} },                  
    { {       369}, { 155} }, // expr          
    { {       368}, {  39} }, // assign_expr   
    { {       367}, {  40} }, // logic_expr    
    { {       366}, {  41} }, // rel_expr      
    { {       365}, {  42} }, // add_expr      
    { {       364}, {  43} }, // mult_expr     
    { {       363}, {  44} }, // unary_expr    
    { {       362}, {  45} }, // primary_expr  
    { {       302}, {  46} }, // MINUS         
    { {       295}, {  47} }, // BANG          
    { {       361}, {  48} }, // location      
    { {       373}, {  49} }, // literal       
    { {       374}, {  50} }, // string_literal
    { {       360}, {  51} }, // method_call   
    { {       287}, {  52} }, // LPAREN        
    { {       357}, {  53} }, // ident         
    { {       279}, {  54} }, // INTEGER       
    { {       280}, {  55} }, // BOOLEAN       
    { {       281}, {  56} }, // CHARACTER     
    { {       283}, {  57} }, // DOUBLE        
    { {       273}, {  58} }, // NULLVALUE     
    { {       282}, {  59} }, // STRING        
    { {       258}, {  60} }, // CALLOUT       
    { {       278}, {   4} }, // IDENTIFIER    
    { {         0}, {   0} },                  
};

SR__ s_148[] =
{
    { { REQ_TOKEN}, {   2} },          
    { {       288}, { 156} }, // RPAREN
    { {         0}, {   0} },          
};

SR__ s_149[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -39} }, 
};

SR__ s_150[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -43} }, 
};

SR__ s_151[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -78} }, 
};

SR__ s_152[] =
{
    { { REQ_TOKEN}, {   3} },          
    { {       288}, { 157} }, // RPAREN
    { {       293}, { 140} }, // COMMA 
    { {         0}, {   0} },          
};

SR__ s_153[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -32} }, 
};

SR__ s_154[] =
{
    { { REQ_TOKEN}, {   3} },          
    { {       351}, { 158} }, // block 
    { {       289}, {  64} }, // LBRACE
    { {         0}, {   0} },          
};

SR__ s_155[] =
{
    { { REQ_TOKEN}, {   2} },         
    { {       293}, { 159} }, // COMMA
    { {         0}, {   0} },         
};

SR__ s_156[] =
{
    { { REQ_TOKEN}, {   3} },          
    { {       351}, { 160} }, // block 
    { {       289}, {  64} }, // LBRACE
    { {         0}, {   0} },          
};

SR__ s_157[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -51} }, 
};

SR__ s_158[] =
{
    { { REQ_DEF}, {   2} },        
    { {     266}, { 161} }, // ELSE
    { {       0}, { -34} },        
};

SR__ s_159[] =
{
    { { REQ_TOKEN}, {  25} },                  
    { {       369}, { 162} }, // expr          
    { {       368}, {  39} }, // assign_expr   
    { {       367}, {  40} }, // logic_expr    
    { {       366}, {  41} }, // rel_expr      
    { {       365}, {  42} }, // add_expr      
    { {       364}, {  43} }, // mult_expr     
    { {       363}, {  44} }, // unary_expr    
    { {       362}, {  45} }, // primary_expr  
    { {       302}, {  46} }, // MINUS         
    { {       295}, {  47} }, // BANG          
    { {       361}, {  48} }, // location      
    { {       373}, {  49} }, // literal       
    { {       374}, {  50} }, // string_literal
    { {       360}, {  51} }, // method_call   
    { {       287}, {  52} }, // LPAREN        
    { {       357}, {  53} }, // ident         
    { {       279}, {  54} }, // INTEGER       
    { {       280}, {  55} }, // BOOLEAN       
    { {       281}, {  56} }, // CHARACTER     
    { {       283}, {  57} }, // DOUBLE        
    { {       273}, {  58} }, // NULLVALUE     
    { {       282}, {  59} }, // STRING        
    { {       258}, {  60} }, // CALLOUT       
    { {       278}, {   4} }, // IDENTIFIER    
    { {         0}, {   0} },                  
};

SR__ s_160[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -37} }, 
};

SR__ s_161[] =
{
    { { REQ_TOKEN}, {   3} },          
    { {       351}, { 163} }, // block 
    { {       289}, {  64} }, // LBRACE
    { {         0}, {   0} },          
};

SR__ s_162[] =
{
    { { REQ_TOKEN}, {   3} },          
    { {       351}, { 164} }, // block 
    { {       289}, {  64} }, // LBRACE
    { {         0}, {   0} },          
};

SR__ s_163[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -35} }, 
};

SR__ s_164[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -36} }, 
};


// State array:
SR__ *s_state[] =
{
  s_0,  s_1,  s_2,  s_3,  s_4,  s_5,  s_6,  s_7,  s_8,  s_9,
  s_10,  s_11,  s_12,  s_13,  s_14,  s_15,  s_16,  s_17,  s_18,  s_19,
  s_20,  s_21,  s_22,  s_23,  s_24,  s_25,  s_26,  s_27,  s_28,  s_29,
  s_30,  s_31,  s_32,  s_33,  s_34,  s_35,  s_36,  s_37,  s_38,  s_39,
  s_40,  s_41,  s_42,  s_43,  s_44,  s_45,  s_46,  s_47,  s_48,  s_49,
  s_50,  s_51,  s_52,  s_53,  s_54,  s_55,  s_56,  s_57,  s_58,  s_59,
  s_60,  s_61,  s_62,  s_63,  s_64,  s_65,  s_66,  s_67,  s_68,  s_69,
  s_70,  s_71,  s_72,  s_73,  s_74,  s_75,  s_76,  s_77,  s_78,  s_79,
  s_80,  s_81,  s_82,  s_83,  s_84,  s_85,  s_86,  s_87,  s_88,  s_89,
  s_90,  s_91,  s_92,  s_93,  s_94,  s_95,  s_96,  s_97,  s_98,  s_99,
  s_100,  s_101,  s_102,  s_103,  s_104,  s_105,  s_106,  s_107,  s_108,  s_109,
  s_110,  s_111,  s_112,  s_113,  s_114,  s_115,  s_116,  s_117,  s_118,  s_119,
  s_120,  s_121,  s_122,  s_123,  s_124,  s_125,  s_126,  s_127,  s_128,  s_129,
  s_130,  s_131,  s_132,  s_133,  s_134,  s_135,  s_136,  s_137,  s_138,  s_139,
  s_140,  s_141,  s_142,  s_143,  s_144,  s_145,  s_146,  s_147,  s_148,  s_149,
  s_150,  s_151,  s_152,  s_153,  s_154,  s_155,  s_156,  s_157,  s_158,  s_159,
  s_160,  s_161,  s_162,  s_163,  s_164,
};

} // anonymous namespace ends



// If the parsing function call uses arguments, then provide an overloaded
// function.  The code below doesn't rely on parameters, so no arguments are
// required.  Furthermore, parse uses a function try block to allow us to do
// ACCEPT and ABORT from anywhere, even from within members called by actions,
// simply throwing the appropriate exceptions.

ParserBase::ParserBase()
:
    d_stackIdx__(-1),
    // $insert debuginit
    d_debug__(false),
    d_nErrors__(0),
    // $insert requiredtokens
    d_requiredTokens__(0),
    d_acceptedTokens__(d_requiredTokens__),
    d_token__(_UNDETERMINED_),
    d_nextToken__(_UNDETERMINED_)
{}


void Parser::print__()
{
// $insert print
}

void ParserBase::clearin()
{
    d_token__ = d_nextToken__ = _UNDETERMINED_;
}

void ParserBase::push__(size_t state)
{
    if (static_cast<size_t>(d_stackIdx__ + 1) == d_stateStack__.size())
    {
        size_t newSize = d_stackIdx__ + STACK_EXPANSION;
        d_stateStack__.resize(newSize);
        d_valueStack__.resize(newSize);
        // $insert LTYPEresize
        d_locationStack__.resize(newSize);
    }
    ++d_stackIdx__;
    d_stateStack__[d_stackIdx__] = d_state__ = state;
    *(d_vsp__ = &d_valueStack__[d_stackIdx__]) = d_val__;
    // $insert LTYPEpush
    *(d_lsp__ = &d_locationStack__[d_stackIdx__]) = d_loc__;
}

void ParserBase::popToken__()
{
    d_token__ = d_nextToken__;

    d_val__ = d_nextVal__;
    d_nextVal__ = STYPE__();

    d_nextToken__ = _UNDETERMINED_;
}
     
void ParserBase::pushToken__(int token)
{
    d_nextToken__ = d_token__;
    d_nextVal__ = d_val__;
    d_token__ = token;
}
     
void ParserBase::pop__(size_t count)
{
    if (d_stackIdx__ < static_cast<int>(count))
    {
        ABORT();
    }

    d_stackIdx__ -= count;
    d_state__ = d_stateStack__[d_stackIdx__];
    d_vsp__ = &d_valueStack__[d_stackIdx__];
    // $insert LTYPEpop
    d_lsp__ = &d_locationStack__[d_stackIdx__];
}

inline size_t ParserBase::top__() const
{
    return d_stateStack__[d_stackIdx__];
}

void Parser::executeAction(int production)
try
{
    if (d_token__ != _UNDETERMINED_)
        pushToken__(d_token__);     // save an already available token

                                    // save default non-nested block $$
    if (int size = s_productionInfo[production].d_size)
        d_val__ = d_vsp__[1 - size];

    switch (production)
    {
        // $insert actioncases
        
        case 1:
#line 70 "decaf.y"
        { 
         d_val__.programClass = new Decaf::IrClass(d_lsp__[-5].first_line, d_lsp__[-5].first_column, d_scanner.filename(), d_vsp__[-4].ident); 
         setRoot(d_val__.programClass); 
         for (auto it : *d_vsp__[-2].fieldDeclListList)
         {
         d_val__.programClass->addFieldDecl(it); 
         }
         d_val__.programClass->addMethodDecl(*d_vsp__[-1].methodDeclList); 
         }
        break;

        case 2:
#line 80 "decaf.y"
        { 
         d_val__.programClass = new Decaf::IrClass(d_lsp__[-4].first_line, d_lsp__[-4].first_column, d_scanner.filename(), d_vsp__[-3].ident); 
         setRoot(d_val__.programClass); 
         for (auto it : *d_vsp__[-1].fieldDeclListList)
         {
         d_val__.programClass->addFieldDecl(it); 
         }
         }
        break;

        case 3:
#line 89 "decaf.y"
        { 
         d_val__.programClass = new Decaf::IrClass(d_lsp__[-4].first_line, d_lsp__[-4].first_column, d_scanner.filename(), d_vsp__[-3].ident); 
         setRoot(d_val__.programClass); 
         d_val__.programClass->addMethodDecl(*d_vsp__[-1].methodDeclList); 
         }
        break;

        case 4:
#line 95 "decaf.y"
        { 
         d_val__.programClass = new Decaf::IrClass(d_lsp__[-3].first_line, d_lsp__[-3].first_column, d_scanner.filename(), d_vsp__[-2].ident); 
         setRoot(d_val__.programClass); 
         }
        break;

        case 5:
#line 103 "decaf.y"
        { 
         d_val__.locationList = new std::vector<Decaf::IrLocation*>(); 
         d_val__.locationList->push_back(d_vsp__[0].location); 
         }
        break;

        case 6:
#line 108 "decaf.y"
        { 
         d_vsp__[-2].locationList->push_back(d_vsp__[0].location); 
         }
        break;

        case 7:
#line 115 "decaf.y"
        { 
         d_val__.fieldDeclListList = new std::vector<std::vector<Decaf::IrFieldDecl*>>(); 
         d_val__.fieldDeclListList->push_back(*d_vsp__[0].fieldDeclList); 
         }
        break;

        case 8:
#line 120 "decaf.y"
        { 
         d_vsp__[-1].fieldDeclListList->push_back(*d_vsp__[0].fieldDeclList); 
         }
        break;

        case 9:
#line 127 "decaf.y"
        { 
         d_val__.fieldDeclList = new std::vector<Decaf::IrFieldDecl*>(); 
         for (auto it = d_vsp__[-1].locationList->begin(); it != d_vsp__[-1].locationList->end(); ++it) 
         { 
         Decaf::IrLocation* location = *it; 
         location->setAsDeclaration();
         Decaf::IrFieldDecl* decl = new Decaf::IrFieldDecl(d_lsp__[-2].first_line, d_lsp__[-2].first_column, d_scanner.filename(), location, (Decaf::IrType)d_vsp__[-2].token); 
         d_val__.fieldDeclList->push_back(decl); 
         } 
         }
        break;

        case 10:
#line 141 "decaf.y"
        { 
         d_val__.methodDeclList = new std::vector<Decaf::IrMethodDecl*>(); 
         d_val__.methodDeclList->push_back(d_vsp__[0].methodDecl); 
         }
        break;

        case 11:
#line 146 "decaf.y"
        { 
         d_vsp__[-1].methodDeclList->push_back(d_vsp__[0].methodDecl); 
         }
        break;

        case 12:
#line 153 "decaf.y"
        { 
         d_val__.varDeclList = new std::vector<Decaf::IrVariableDecl*>(); 
         d_val__.varDeclList->push_back(d_vsp__[0].varDecl); 
         }
        break;

        case 13:
#line 158 "decaf.y"
        { 
         d_vsp__[-2].varDeclList->push_back(d_vsp__[0].varDecl); 
         }
        break;

        case 14:
#line 165 "decaf.y"
        { 
         d_val__.varDecl = new Decaf::IrVariableDecl(d_lsp__[-1].first_line, d_lsp__[-1].first_column, d_scanner.filename(), d_vsp__[0].ident, (Decaf::IrType)d_vsp__[-1].token); 
         }
        break;

        case 15:
#line 172 "decaf.y"
        { 
         d_val__.methodDecl = new Decaf::IrMethodDecl(d_lsp__[-5].first_line, d_lsp__[-5].first_column, d_scanner.filename(), d_vsp__[-4].ident, (Decaf::IrType)d_vsp__[-5].token); 
         for (auto it : *d_vsp__[-2].varDeclList)
         {
         d_val__.methodDecl->addArgument(it);
         }
         d_val__.methodDecl->addBlock(d_vsp__[0].block);
         }
        break;

        case 16:
#line 181 "decaf.y"
        { 
         d_val__.methodDecl = new Decaf::IrMethodDecl(d_lsp__[-4].first_line, d_lsp__[-4].first_column, d_scanner.filename(), d_vsp__[-3].ident, (Decaf::IrType)d_vsp__[-4].token);
         d_val__.methodDecl->addBlock(d_vsp__[0].block);
         }
        break;

        case 17:
#line 189 "decaf.y"
        { 
         d_val__.block = new Decaf::IrBlock(d_lsp__[-3].first_line, d_lsp__[-3].first_column, d_scanner.filename()); 
         d_val__.block->addVariableDecl(*d_vsp__[-2].varDeclList); 
         d_val__.block->addStatements(*d_vsp__[-1].stmtList); 
         }
        break;

        case 18:
#line 195 "decaf.y"
        {
         d_val__.block = new Decaf::IrBlock(d_lsp__[-2].first_line, d_lsp__[-2].first_column, d_scanner.filename()); 
         d_val__.block->addStatements(*d_vsp__[-1].stmtList); 
         }
        break;

        case 19:
#line 200 "decaf.y"
        { 
         d_val__.block = new Decaf::IrBlock(d_lsp__[-2].first_line, d_lsp__[-2].first_column, d_scanner.filename()); 
         d_val__.block->addVariableDecl(*d_vsp__[-1].varDeclList); 
         }
        break;

        case 20:
#line 205 "decaf.y"
        { 
         d_val__.block = new Decaf::IrBlock(d_lsp__[-1].first_line, d_lsp__[-1].first_column, d_scanner.filename()); 
         }
        break;

        case 21:
#line 212 "decaf.y"
        { 
         d_val__.varDeclList = new std::vector<Decaf::IrVariableDecl*>(); 
         d_val__.varDeclList->push_back(d_vsp__[0].varDecl); 
         }
        break;

        case 22:
#line 217 "decaf.y"
        { 
         d_vsp__[-1].varDeclList->push_back(d_vsp__[0].varDecl); 
         }
        break;

        case 23:
#line 224 "decaf.y"
        { 
         d_val__.varDecl = new Decaf::IrVariableDecl(d_lsp__[-2].first_line, d_lsp__[-2].first_column, d_scanner.filename(), *d_vsp__[-1].identList, (Decaf::IrType)d_vsp__[-2].token); 
         }
        break;

        case 24:
#line 231 "decaf.y"
        { 
         d_val__.stmtList = new std::vector<Decaf::IrStatement*>(); 
         d_val__.stmtList->push_back(d_vsp__[0].stmt); 
         }
        break;

        case 25:
#line 236 "decaf.y"
        { 
         d_vsp__[-1].stmtList->push_back(d_vsp__[0].stmt); 
         }
        break;

        case 26:
#line 243 "decaf.y"
        { 
         d_val__.token = (int)Decaf::IrType::Integer; 
         }
        break;

        case 27:
#line 247 "decaf.y"
        { 
         d_val__.token = (int)Decaf::IrType::Boolean; 
         }
        break;

        case 28:
#line 251 "decaf.y"
        {
         d_val__.token = (int)Decaf::IrType::Double;
         }
        break;

        case 29:
#line 255 "decaf.y"
        {
         d_val__.token = (int)Decaf::IrType::String;
         }
        break;

        case 30:
#line 259 "decaf.y"
        { 
         d_val__.token = (int)Decaf::IrType::Void; 
         }
        break;

        case 31:
#line 266 "decaf.y"
        { 
         d_val__.identList = new std::vector<IrIdentifier*>(); 
         d_val__.identList->push_back(d_vsp__[0].ident); 
         }
        break;

        case 32:
#line 271 "decaf.y"
        {
         d_vsp__[-2].identList->push_back(d_vsp__[0].ident); 
         }
        break;

        case 33:
#line 278 "decaf.y"
        { 
         d_val__.ident = new Decaf::IrIdentifier(d_lsp__[0].first_line, d_lsp__[0].first_column, d_scanner.filename(), d_scanner.matched()); 
         }
        break;

        case 34:
#line 285 "decaf.y"
        { 
         d_val__.stmt = new Decaf::IrIfStatement(d_lsp__[-4].first_line, d_lsp__[-4].first_column, d_scanner.filename(), d_vsp__[-2].expression, d_vsp__[0].block); 
         }
        break;

        case 35:
#line 289 "decaf.y"
        { 
         d_val__.stmt = new Decaf::IrIfStatement(d_lsp__[-6].first_line, d_lsp__[-6].first_column, d_scanner.filename(), d_vsp__[-4].expression, d_vsp__[-2].block, d_vsp__[0].block); 
         }
        break;

        case 36:
#line 293 "decaf.y"
        { 
         d_val__.stmt = new Decaf::IrForStatement(d_lsp__[-6].first_line, d_lsp__[-6].first_column, d_scanner.filename(), d_vsp__[-5].ident, d_vsp__[-3].expression, d_vsp__[-1].expression, d_vsp__[0].block); 
         }
        break;

        case 37:
#line 297 "decaf.y"
        {
         d_val__.stmt = new Decaf::IrWhileStatement(d_lsp__[-4].first_line, d_lsp__[-4].first_column, d_scanner.filename(), d_vsp__[-2].expression, d_vsp__[0].block); 
         }
        break;

        case 38:
#line 301 "decaf.y"
        { 
         d_val__.stmt = new Decaf::IrReturnStatement(d_lsp__[-1].first_line, d_lsp__[-1].first_column, d_scanner.filename()); 
         }
        break;

        case 39:
#line 305 "decaf.y"
        { 
         d_val__.stmt = new Decaf::IrReturnStatement(d_lsp__[-2].first_line, d_lsp__[-2].first_column, d_scanner.filename(), d_vsp__[-1].expression); 
         }
        break;

        case 40:
#line 309 "decaf.y"
        { 
         d_val__.stmt = new Decaf::IrBreakStatement(d_lsp__[-1].first_line, d_lsp__[-1].first_column, d_scanner.filename()); 
         }
        break;

        case 41:
#line 313 "decaf.y"
        { 
         d_val__.stmt = new Decaf::IrContinueStatement(d_lsp__[-1].first_line, d_lsp__[-1].first_column, d_scanner.filename()); 
         }
        break;

        case 42:
#line 317 "decaf.y"
        { 
         d_val__.stmt = new Decaf::IrExpressionStatement(d_lsp__[-1].first_line, d_lsp__[-1].first_column, d_scanner.filename(), d_vsp__[-1].expression); 
         }
        break;

        case 43:
#line 321 "decaf.y"
        {
         d_val__.stmt = new Decaf::IrGotoStatement(d_lsp__[-2].first_line, d_lsp__[-2].first_column, d_scanner.filename(), d_vsp__[-1].ident);
         }
        break;

        case 44:
#line 325 "decaf.y"
        {
         d_val__.stmt = new Decaf::IrLabelStatement(d_lsp__[-1].first_line, d_lsp__[-1].first_column, d_scanner.filename(), d_vsp__[-1].ident);
         }
        break;

        case 45:
#line 329 "decaf.y"
        { 
         d_val__.stmt = d_vsp__[0].block; 
         }
        break;

        case 46:
#line 335 "decaf.y"
        { d_val__.token = (int)Decaf::IrAssignmentOperator::Assign; }
        break;

        case 47:
#line 336 "decaf.y"
        { d_val__.token = (int)Decaf::IrAssignmentOperator::IncrementAssign; }
        break;

        case 48:
#line 337 "decaf.y"
        { d_val__.token = (int)Decaf::IrAssignmentOperator::DecrementAssign; }
        break;

        case 49:
#line 342 "decaf.y"
        { 
         d_val__.methodCall = new Decaf::IrMethodCall(d_lsp__[-3].first_line, d_lsp__[-3].first_column, d_scanner.filename(), d_vsp__[-3].ident, Decaf::IrType::Unknown);
         for (auto it : *d_vsp__[-1].exprList) 
         {
         d_val__.methodCall->addArgument(it);
         }
         }
        break;

        case 50:
#line 350 "decaf.y"
        { 
         d_val__.methodCall = new Decaf::IrMethodCall(d_lsp__[-2].first_line, d_lsp__[-2].first_column, d_scanner.filename(), d_vsp__[-2].ident, Decaf::IrType::Unknown); 
         }
        break;

        case 51:
#line 354 "decaf.y"
        {
         d_val__.methodCall = new Decaf::IrMethodCall(d_lsp__[-5].first_line, d_lsp__[-5].first_column, d_scanner.filename(), d_vsp__[-3].stringLiteral, Decaf::IrType::Integer);
         for (auto it : *d_vsp__[-1].exprList) 
         {
         d_val__.methodCall->addArgument(it);
         }
         }
        break;

        case 52:
#line 362 "decaf.y"
        {
         d_val__.methodCall = new Decaf::IrMethodCall(d_lsp__[-3].first_line, d_lsp__[-3].first_column, d_scanner.filename(), d_vsp__[-1].stringLiteral, Decaf::IrType::Integer);
         }
        break;

        case 53:
#line 369 "decaf.y"
        { 
         d_val__.location = new Decaf::IrLocation(d_lsp__[0].first_line, d_lsp__[0].first_column, d_scanner.filename(), d_vsp__[0].ident, Decaf::IrType::Unknown); 
         }
        break;

        case 54:
#line 373 "decaf.y"
        { 
         d_val__.location = new Decaf::IrLocation(d_lsp__[-3].first_line, d_lsp__[-3].first_column, d_scanner.filename(), d_vsp__[-3].ident, Decaf::IrType::Unknown, d_vsp__[-1].expression); 
         }
        break;

        case 55:
#line 379 "decaf.y"
        { d_val__.expression = d_vsp__[0].location; }
        break;

        case 56:
#line 380 "decaf.y"
        { d_val__.expression = d_vsp__[0].literal; }
        break;

        case 57:
#line 381 "decaf.y"
        { d_val__.expression = d_vsp__[0].stringLiteral; }
        break;

        case 58:
#line 382 "decaf.y"
        { d_val__.expression = d_vsp__[0].methodCall; }
        break;

        case 59:
#line 383 "decaf.y"
        { d_val__.expression = d_vsp__[-1].expression; }
        break;

        case 60:
#line 387 "decaf.y"
        { d_val__.expression = d_vsp__[0].expression; }
        break;

        case 61:
#line 389 "decaf.y"
        { 
         Decaf::IrIntegerLiteral* intLit = dynamic_cast<Decaf::IrIntegerLiteral*>(d_vsp__[0].expression);
         if (intLit == nullptr)
         {
         d_val__.expression = new Decaf::IrBinaryExpression(d_lsp__[-1].first_line, d_lsp__[-1].first_column, d_scanner.filename(), Decaf::IrType::Unknown, nullptr, Decaf::IrBinaryOperator::Subtract, d_vsp__[0].expression); 
         }
         else
         {
         
         intLit->setValue(-intLit->getValue()); 
         d_val__.expression = d_vsp__[0].expression;
         }
         }
        break;

        case 62:
#line 403 "decaf.y"
        { 
         Decaf::IrBooleanLiteral* boolLit = dynamic_cast<Decaf::IrBooleanLiteral*>(d_vsp__[0].expression);
         if (boolLit == nullptr)
         {
         d_val__.expression = new Decaf::IrBooleanExpression(d_lsp__[-1].first_line, d_lsp__[-1].first_column, d_scanner.filename(), nullptr, Decaf::IrBooleanOperator::Not, d_vsp__[0].expression); 
         }
         else
         {
         
         boolLit->setValue(!boolLit->getValue());
         d_val__.expression = d_vsp__[0].expression;
         }
         }
        break;

        case 63:
#line 419 "decaf.y"
        { d_val__.expression = d_vsp__[0].expression; }
        break;

        case 64:
#line 421 "decaf.y"
        { 
         d_val__.expression = new Decaf::IrBinaryExpression(d_lsp__[-2].first_line, d_lsp__[-2].first_column, d_scanner.filename(), Decaf::IrType::Unknown, d_vsp__[-2].expression, Decaf::IrBinaryOperator::Multiply, d_vsp__[0].expression); 
         }
        break;

        case 65:
#line 425 "decaf.y"
        { 
         d_val__.expression = new Decaf::IrBinaryExpression(d_lsp__[-2].first_line, d_lsp__[-2].first_column, d_scanner.filename(), Decaf::IrType::Unknown, d_vsp__[-2].expression, Decaf::IrBinaryOperator::Divide, d_vsp__[0].expression); 
         }
        break;

        case 66:
#line 429 "decaf.y"
        { 
         d_val__.expression = new Decaf::IrBinaryExpression(d_lsp__[-2].first_line, d_lsp__[-2].first_column, d_scanner.filename(), Decaf::IrType::Unknown, d_vsp__[-2].expression, Decaf::IrBinaryOperator::Modulo, d_vsp__[0].expression); 
         }
        break;

        case 67:
#line 435 "decaf.y"
        { d_val__.expression = d_vsp__[0].expression; }
        break;

        case 68:
#line 437 "decaf.y"
        { 
         d_val__.expression = new Decaf::IrBinaryExpression(d_lsp__[-2].first_line, d_lsp__[-2].first_column, d_scanner.filename(), Decaf::IrType::Unknown, d_vsp__[-2].expression, Decaf::IrBinaryOperator::Add, d_vsp__[0].expression); 
         }
        break;

        case 69:
#line 441 "decaf.y"
        { 
         d_val__.expression = new Decaf::IrBinaryExpression(d_lsp__[-2].first_line, d_lsp__[-2].first_column, d_scanner.filename(), Decaf::IrType::Unknown, d_vsp__[-2].expression, Decaf::IrBinaryOperator::Subtract, d_vsp__[0].expression); 
         }
        break;

        case 70:
#line 447 "decaf.y"
        { d_val__.expression = d_vsp__[0].expression; }
        break;

        case 71:
#line 448 "decaf.y"
        { d_val__.expression = new Decaf::IrBooleanExpression(d_lsp__[-2].first_line, d_lsp__[-2].first_column, d_scanner.filename(), d_vsp__[-2].expression, (Decaf::IrBooleanOperator)d_vsp__[-1].token, d_vsp__[0].expression); }
        break;

        case 72:
#line 452 "decaf.y"
        { d_val__.expression = d_vsp__[0].expression; }
        break;

        case 73:
#line 454 "decaf.y"
        { 
         d_val__.expression = new Decaf::IrBooleanExpression(d_lsp__[-2].first_line, d_lsp__[-2].first_column, d_scanner.filename(), d_vsp__[-2].expression, (Decaf::IrBooleanOperator)d_vsp__[-1].token, d_vsp__[0].expression); 
         }
        break;

        case 74:
#line 460 "decaf.y"
        { d_val__.expression = d_vsp__[0].expression; }
        break;

        case 75:
#line 462 "decaf.y"
        {
         d_val__.expression = new Decaf::IrAssignExpression(d_lsp__[-2].first_line, d_lsp__[-2].first_column, d_scanner.filename(), d_vsp__[-2].expression, (Decaf::IrAssignmentOperator)d_vsp__[-1].token, d_vsp__[0].expression); 
         }
        break;

        case 76:
#line 468 "decaf.y"
        { d_val__.expression = d_vsp__[0].expression; }
        break;

        case 77:
#line 472 "decaf.y"
        { d_val__.exprList = new std::vector<Decaf::IrExpression*>(); d_val__.exprList->push_back(d_vsp__[0].expression); }
        break;

        case 78:
#line 473 "decaf.y"
        { d_val__.exprList->push_back(d_vsp__[0].expression); }
        break;

        case 79:
#line 477 "decaf.y"
        { d_val__.token = (int)Decaf::IrBooleanOperator::Less; }
        break;

        case 80:
#line 478 "decaf.y"
        { d_val__.token = (int)Decaf::IrBooleanOperator::Greater; }
        break;

        case 81:
#line 479 "decaf.y"
        { d_val__.token = (int)Decaf::IrBooleanOperator::LessEqual; }
        break;

        case 82:
#line 480 "decaf.y"
        { d_val__.token = (int)Decaf::IrBooleanOperator::GreaterEqual; }
        break;

        case 83:
#line 481 "decaf.y"
        { d_val__.token = (int)Decaf::IrBooleanOperator::Equal; }
        break;

        case 84:
#line 482 "decaf.y"
        { d_val__.token = (int)Decaf::IrBooleanOperator::NotEqual; }
        break;

        case 85:
#line 486 "decaf.y"
        { d_val__.token = (int)Decaf::IrBooleanOperator::LogicalAnd; }
        break;

        case 86:
#line 487 "decaf.y"
        { d_val__.token = (int)Decaf::IrBooleanOperator::LogicalOr; }
        break;

        case 87:
#line 492 "decaf.y"
        { 
         d_val__.literal = new Decaf::IrIntegerLiteral(d_lsp__[0].first_line, d_lsp__[0].first_column, d_scanner.filename(), d_scanner.matched()); 
         }
        break;

        case 88:
#line 496 "decaf.y"
        { 
         d_val__.literal = new Decaf::IrBooleanLiteral(d_lsp__[0].first_line, d_lsp__[0].first_column, d_scanner.filename(), d_scanner.matched()); 
         }
        break;

        case 89:
#line 500 "decaf.y"
        { 
         d_val__.literal = new Decaf::IrCharacterLiteral(d_lsp__[0].first_line, d_lsp__[0].first_column, d_scanner.filename(), d_scanner.matched()); 
         }
        break;

        case 90:
#line 504 "decaf.y"
        {
         d_val__.literal = new Decaf::IrDoubleLiteral(d_lsp__[0].first_line, d_lsp__[0].first_column, d_scanner.filename(), d_scanner.matched());
         }
        break;

        case 91:
#line 508 "decaf.y"
        {
         d_val__.literal = new Decaf::IrNullLiteral(d_lsp__[0].first_line, d_lsp__[0].first_column, d_scanner.filename(), d_scanner.matched());
         }
        break;

        case 92:
#line 515 "decaf.y"
        {
         d_val__.stringLiteral = new Decaf::IrStringLiteral(d_lsp__[0].first_line, d_lsp__[0].first_column, d_scanner.filename(), d_scanner.matched());
         }
        break;

    }
}
catch (std::exception const &exc)
{
    exceptionHandler__(exc);
}

inline void ParserBase::reduce__(PI__ const &pi)
{
    d_token__ = pi.d_nonTerm;
    pop__(pi.d_size);

}

// If d_token__ is _UNDETERMINED_ then if d_nextToken__ is _UNDETERMINED_ another
// token is obtained from lex(). Then d_nextToken__ is assigned to d_token__.
void Parser::nextToken()
{
    if (d_token__ != _UNDETERMINED_)        // no need for a token: got one
        return;                             // already

    if (d_nextToken__ != _UNDETERMINED_)
    {
        popToken__();                       // consume pending token
    }
    else
    {
        ++d_acceptedTokens__;               // accept another token (see
                                            // errorRecover())
        d_token__ = lex();
        if (d_token__ <= 0)
            d_token__ = _EOF_;
    }
    print();
}

// if the final transition is negative, then we should reduce by the rule
// given by its positive value. Note that the `recovery' parameter is only
// used with the --debug option
int Parser::lookup(bool recovery)
{
// $insert threading
    SR__ *sr = s_state[d_state__];          // get the appropriate state-table
    int lastIdx = sr->d_lastIdx;            // sentinel-index in the SR__ array
    
    SR__ *lastElementPtr = sr + lastIdx;
    lastElementPtr->d_token = d_token__;    // set search-token
    
    SR__ *elementPtr = sr + 1;              // start the search at s_xx[1]
    while (elementPtr->d_token != d_token__)
        ++elementPtr;
    

    if (elementPtr == lastElementPtr)   // reached the last element
    {
        if (elementPtr->d_action < 0)   // default reduction
        {
            return elementPtr->d_action;                
        }

        // No default reduction, so token not found, so error.
        throw UNEXPECTED_TOKEN__;
    }

    // not at the last element: inspect the nature of the action
    // (< 0: reduce, 0: ACCEPT, > 0: shift)

    int action = elementPtr->d_action;


    return action;
}

    // When an error has occurred, pop elements off the stack until the top
    // state has an error-item. If none is found, the default recovery
    // mode (which is to abort) is activated. 
    //
    // If EOF is encountered without being appropriate for the current state,
    // then the error recovery will fall back to the default recovery mode.
    // (i.e., parsing terminates)
void Parser::errorRecovery()
try
{
    if (d_acceptedTokens__ >= d_requiredTokens__)// only generate an error-
    {                                           // message if enough tokens 
        ++d_nErrors__;                          // were accepted. Otherwise
        error("Syntax error");                  // simply skip input

    }


    // get the error state
    while (not (s_state[top__()][0].d_type & ERR_ITEM))
    {
        pop__();
    }

    // In the error state, lookup a token allowing us to proceed.
    // Continuation may be possible following multiple reductions,
    // but eventuall a shift will be used, requiring the retrieval of
    // a terminal token. If a retrieved token doesn't match, the catch below 
    // will ensure the next token is requested in the while(true) block
    // implemented below:

    int lastToken = d_token__;                  // give the unexpected token a
                                                // chance to be processed
                                                // again.

    pushToken__(_error_);                       // specify _error_ as next token
    push__(lookup(true));                       // push the error state

    d_token__ = lastToken;                      // reactivate the unexpected
                                                // token (we're now in an
                                                // ERROR state).

    bool gotToken = true;                       // the next token is a terminal

    while (true)
    {
        try
        {
            if (s_state[d_state__]->d_type & REQ_TOKEN)
            {
                gotToken = d_token__ == _UNDETERMINED_;
                nextToken();                    // obtain next token
            }
            
            int action = lookup(true);

            if (action > 0)                 // push a new state
            {
                push__(action);
                popToken__();

                if (gotToken)
                {

                    d_acceptedTokens__ = 0;
                    return;
                }
            }
            else if (action < 0)
            {
                // no actions executed on recovery but save an already 
                // available token:
                if (d_token__ != _UNDETERMINED_)
                    pushToken__(d_token__);
 
                                            // next token is the rule's LHS
                reduce__(s_productionInfo[-action]); 
            }
            else
                ABORT();                    // abort when accepting during
                                            // error recovery
        }
        catch (...)
        {
            if (d_token__ == _EOF_)
                ABORT();                    // saw inappropriate _EOF_
                      
            popToken__();                   // failing token now skipped
        }
    }
}
catch (ErrorRecovery__)       // This is: DEFAULT_RECOVERY_MODE
{
    ABORT();
}

    // The parsing algorithm:
    // Initially, state 0 is pushed on the stack, and d_token__ as well as
    // d_nextToken__ are initialized to _UNDETERMINED_. 
    //
    // Then, in an eternal loop:
    //
    //  1. If a state does not have REQ_TOKEN no token is assigned to
    //     d_token__. If the state has REQ_TOKEN, nextToken() is called to
    //      determine d_nextToken__ and d_token__ is set to
    //     d_nextToken__. nextToken() will not call lex() unless d_nextToken__ is 
    //     _UNDETERMINED_. 
    //
    //  2. lookup() is called: 
    //     d_token__ is stored in the final element's d_token field of the
    //     state's SR_ array. 
    //
    //  3. The current token is looked up in the state's SR_ array
    //
    //  4. Depending on the result of the lookup() function the next state is
    //     shifted on the parser's stack, a reduction by some rule is applied,
    //     or the parsing function returns ACCEPT(). When a reduction is
    //     called for, any action that may have been defined for that
    //     reduction is executed.
    //
    //  5. An error occurs if d_token__ is not found, and the state has no
    //     default reduction. Error handling was described at the top of this
    //     file.

int Parser::parse()
try 
{
    push__(0);                              // initial state
    clearin();                              // clear the tokens.

    while (true)
    {
        try
        {
            if (s_state[d_state__]->d_type & REQ_TOKEN)
                nextToken();                // obtain next token


            int action = lookup(false);     // lookup d_token__ in d_state__

            if (action > 0)                 // SHIFT: push a new state
            {
                push__(action);
                popToken__();               // token processed
            }
            else if (action < 0)            // REDUCE: execute and pop.
            {
                executeAction(-action);
                                            // next token is the rule's LHS
                reduce__(s_productionInfo[-action]); 
            }
            else 
                ACCEPT();
        }
        catch (ErrorRecovery__)
        {
            errorRecovery();
        }
    }
}
catch (Return__ retValue)
{
    return retValue;
}



