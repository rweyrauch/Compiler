// Generated by Bisonc++ V4.05.00 on Sat, 14 Feb 2015 14:45:53 -0800

#ifndef Parser_h_included
#define Parser_h_included

#include <algorithm>
#include <fstream>
#include "Ir.h"

using namespace Decaf;

// $insert baseclass
#include "Parserbase.h"
// $insert scanner.h
#include "Scanner.h"

enum class Optimization : int
{
    GLOBAL_CSE,
    ALL
};

#undef Parser
class Parser: public ParserBase
{
    // $insert scannerobject
    Scanner d_scanner;

    IrClass* d_root;
    IrTraversalContext* d_ctx;
    IrOptimizer* d_optimizer;
    
    std::vector<std::string> d_source;
    std::string d_blank;
    
    std::vector<Optimization> m_optimizations;
    
    public:
        
        Parser(std::istream &in, std::ostream &out, bool ia64) :
            d_scanner(in, out),
            d_root(nullptr),
            d_ctx(nullptr),
            d_optimizer(nullptr)
        {
            d_scanner.setSLoc(&d_loc__);
            d_ctx = new IrTraversalContext(ia64);
            d_optimizer = new IrOptimizer();
        }
        Parser(std::string const &infile, std::string const &outfile, bool ia64) :
            d_scanner(infile, outfile),
            d_root(nullptr),
            d_ctx(nullptr),
            d_optimizer(nullptr)
       {
            preloadSource(infile);            
            d_scanner.setSLoc(&d_loc__);            
            d_ctx = new IrTraversalContext(ia64);
            d_ctx->setSource(&d_source);
            d_optimizer = new IrOptimizer();
        }
        virtual ~Parser() 
        {
			delete d_ctx;
			delete d_optimizer;
		}
        void enableOpt(Optimization which)
        {
            m_optimizations.push_back(which);
        }
        int parse();
        bool codegen()
        {
            if (d_root)
            {
                d_root->codegen(d_ctx);
                
                // convert generated TAC into basic blocks and optimize
                std::vector<IrTacStmt> statements = optimize(d_ctx->getStatements());
                
                // write string table
                d_ctx->genStrings();
    
                // convert TAC into x86_64 assembly
                d_ctx->codegen(d_scanner.outStream());
            }
            return false;
        }
        void dumpAST() 
        { 
            if (d_root) 
                d_root->print(0); 
        }
        bool semanticChecks() 
        { 
            if (d_root) 
            {
                d_root->propagateTypes(d_ctx);
                return d_root->analyze(d_ctx); 
            }
            return false; 
        }
        std::vector<IrTacStmt> optimize(const std::vector<IrTacStmt>& statements)
        {
			std::vector<IrTacStmt> optimized_statements = statements;
			d_optimizer->generateBasicBlocks(statements);
			
			std::sort(m_optimizations.begin(), m_optimizations.end());
			std::unique(m_optimizations.begin(), m_optimizations.end());
			
			// apply requested optimizations in the required order
			for (auto it : m_optimizations)
			{
				if (it == Optimization::GLOBAL_CSE)
				{
					d_optimizer->globalCommonSubexpressionElimination();
				}
			}
			return d_optimizer->getOptimizedStatements();
		}
        
    private:
        void error(char const *msg);    // called on (syntax) errors
        int lex();                      // returns the next token from the
                                        // lexical scanner. 
        void print();                   // use, e.g., d_token, d_loc

        void setRoot(IrClass* root) { d_root = root; }
        
        const std::string& line(size_t line_num) const;
        
        void preloadSource(const std::string &infile);

    // support functions for parse():
        void executeAction(int ruleNr);
        void errorRecovery();
        int lookup(bool recovery);
        void nextToken();
        void print__();
        void exceptionHandler__(std::exception const &exc);
};


#endif
