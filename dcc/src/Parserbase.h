// Generated by Bisonc++ V4.09.02 on Tue, 07 Apr 2015 17:48:53 -0700

#ifndef ParserBase_h_included
#define ParserBase_h_included

#include <exception>
#include <vector>
#include <iostream>


namespace // anonymous
{
    struct PI__;
}



class ParserBase
{
    public:
// $insert tokens

    // Symbolic tokens:
    enum Tokens__
    {
        RETURN = 257,
        CALLOUT,
        BOOLTYPE,
        INTTYPE,
        DOUBLETYPE,
        STRINGTYPE,
        CLASS,
        VOID,
        IF,
        ELSE,
        FOR,
        CONTINUE,
        BREAK,
        GOTO,
        WHILE,
        INTERFACE,
        NULLVALUE,
        EXTENDS,
        IMPLEMENTS,
        THIS,
        NEW,
        IDENTIFIER,
        INTEGER,
        BOOLEAN,
        CHARACTER,
        STRING,
        DOUBLE,
        EQUAL,
        PLUSEQUAL,
        MINUSEQUAL,
        LPAREN,
        RPAREN,
        LBRACE,
        RBRACE,
        LBRACKET,
        RBRACKET,
        COMMA,
        SEMI,
        BANG,
        COLON,
        DOT,
        MOD,
        LOR,
        LAND,
        PLUS,
        MINUS,
        CEQ,
        CNE,
        CLT,
        CLE,
        CGT,
        CGE,
        MUL,
        DIV,
    };

// $insert LTYPE
    struct LTYPE__
    {
        int timestamp;
        int first_line;
        int first_column;
        int last_line;
        int last_column;
        char *text;
    };
    
// $insert STYPE
union STYPE__
{
 Decaf::IrClass *programClass;
 Decaf::IrIdentifier *ident;
 std::vector<Decaf::IrIdentifier*> *identList;
 Decaf::IrLocation *location;
 std::vector<Decaf::IrLocation*> *locationList;
 Decaf::IrBlock *block;
 Decaf::IrMethodCall *methodCall;
 Decaf::IrMethodDecl *methodDecl;
 Decaf::IrFieldDecl *fieldDecl;
 Decaf::IrExpression *expression;
 std::vector<Decaf::IrExpression*> *exprList;
 std::vector<Decaf::IrMethodDecl*> *methodDeclList;
 std::vector<Decaf::IrFieldDecl*> *fieldDeclList;
 std::vector<std::vector<Decaf::IrFieldDecl*>> *fieldDeclListList;
 Decaf::IrStatement *stmt;
 std::vector<Decaf::IrStatement*> *stmtList;
 Decaf::IrVariableDecl *varDecl;
 std::vector<Decaf::IrVariableDecl*> *varDeclList;
 Decaf::IrLiteral *literal;
 Decaf::IrStringLiteral *stringLiteral;
 std::string *string;
 int token;
};


    private:
        int d_stackIdx__;
        std::vector<size_t>   d_stateStack__;
        std::vector<STYPE__>  d_valueStack__;
// $insert LTYPEstack
        std::vector<LTYPE__>      d_locationStack__;

    protected:
        enum Return__
        {
            PARSE_ACCEPT__ = 0,   // values used as parse()'s return values
            PARSE_ABORT__  = 1
        };
        enum ErrorRecovery__
        {
            DEFAULT_RECOVERY_MODE__,
            UNEXPECTED_TOKEN__,
        };
        bool        d_debug__;
        size_t      d_nErrors__;
        size_t      d_requiredTokens__;
        size_t      d_acceptedTokens__;
        int         d_token__;
        int         d_nextToken__;
        size_t      d_state__;
        STYPE__    *d_vsp__;
        STYPE__     d_val__;
        STYPE__     d_nextVal__;
// $insert LTYPEdata
        LTYPE__   d_loc__;
        LTYPE__  *d_lsp__;

        ParserBase();

        void ABORT() const;
        void ACCEPT() const;
        void ERROR() const;
        void clearin();
        bool debug() const;
        void pop__(size_t count = 1);
        void push__(size_t nextState);
        void popToken__();
        void pushToken__(int token);
        void reduce__(PI__ const &productionInfo);
        void errorVerbose__();
        size_t top__() const;

    public:
        void setDebug(bool mode);
}; 

inline bool ParserBase::debug() const
{
    return d_debug__;
}

inline void ParserBase::setDebug(bool mode)
{
    d_debug__ = mode;
}

inline void ParserBase::ABORT() const
{
    throw PARSE_ABORT__;
}

inline void ParserBase::ACCEPT() const
{
    throw PARSE_ACCEPT__;
}

inline void ParserBase::ERROR() const
{
    throw UNEXPECTED_TOKEN__;
}


// As a convenience, when including ParserBase.h its symbols are available as
// symbols in the class Parser, too.
#define Parser ParserBase


#endif


