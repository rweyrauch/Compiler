
class Random {

  int seed;

  void Init(int seedVal) {
    seed = seedVal;
  }

  int GenRandom() {
    seed = (15625 * (seed % 10000) + 22221) % 65536;
    return seed;
  }

  int RndInt(int max) {
    return (GenRandom() % max);
  }

}

Random gRnd;

class Deck {

  int current;
  int[] cards;

  void Init() {
    cards = new int[52];
  }

  void Shuffle() {
    for (current = 0; current < 52; current = current + 1) {
      cards[current] = (current + 1) % 13;
    }
    while (current > 0) {
      int r;
      int temp;
      r = gRnd.RndInt(current);
      current = current - 1;
      temp = cards[current];
      cards[current] = cards[r];
      cards[r] = temp;
    }
  }

  int GetCard() {
    int result;
    if (current >= 52) { return 0; }
    result = cards[current];
    current = current + 1;
    return result;
  }
}

class BJDeck {

  Deck[] decks;
  int numdealt;

  void Init() {
    int i;
    decks = new Deck[8];
    for (i = 0; i < 8; i = i + 1) {
      decks[i] = new Deck;
      decks[i].Init();
    }
  }

  int DealCard() {
    int c;
    c = 0;
    if (numdealt >= 8*52) { return 11; }
    while (c == 0) {
      int d;
      d = gRnd.RndInt(8);
      c = decks[d].GetCard();
    }
    if (c > 10) { c = 10; }
    else if (c == 1) { c = 11; }
    numdealt = numdealt + 1;
    return c;
  }

  void Shuffle() {
    int i;

    callout("printf","Shuffling...");
    for (i = 0; i < 8; i = i + 1) {
      decks[i].Shuffle();
    }
    numdealt = 0;
    callout("printf","done.\n");
  }

  int NumCardsRemaining()
  {
    return 8*52 - numdealt;
  }
}

class Player {
  int total;
  int aces;
  int numcards;
  int bet;
  int money;
  string name;

  void Init(int num) {
    money = 1000;
    callout("printf", "What is the name of player #%d?", num);
    name = ReadLine();
  }

  void Hit(BJDeck deck) {
    int card;
    card = deck.DealCard();
    callout("printf", "%s was dealt a %d.\n", name, card);
    total = total + card;
    numcards = numcards + 1;
    if (card == 11) { aces = aces + 1; }
    while ((total > 21) && (aces > 0)) {
      total = total - 10;
      aces = aces - 1;
    }
  }

  boolean DoubleDown(BJDeck deck) {
    int result;
    if ((total != 10) && (total != 11)) { return false; }
    if (GetYesOrNo("Would you like to double down?")) {
      bet = bet * 2;
      Hit(deck);
      callout("printf", "%s, your total is %d.\n", name, total);
      return true;
    }
    return false;
  }

  void TakeTurn(BJDeck deck) {
    boolean stillGoing;

    callout("printf","\n%s\'s turn.\n", name);
    total = 0;
    aces = 0;
    numcards = 0;
    Hit(deck);
    Hit(deck);
    if (!DoubleDown(deck)) {
      stillGoing = true;
      while (total <= 21 && stillGoing) {
        callout("printf", "%s, your total is %d.\n", name, total);
        stillGoing = GetYesOrNo("Would you like a hit?");
        if (stillGoing) { Hit(deck); }
      }
    }
    if (total > 21) { callout("printf", "%s busts with the big %d!\n", name, total); }
    else { callout("printf", "%s stays at %d.\n", name, total); }
  }

  boolean HasMoney() { return money > 0; }

  void PrintMoney() {
    callout("printf", "%s, you have $%d.\n", name, money);
  }

  void PlaceBet() {
    bet = 0;
    PrintMoney();
    while ((bet <= 0) || (bet > money)) {
      callout("printf", "How much would you like to bet? ");
      bet = ReadInteger();
    }
  }

  int GetTotal() { return total;}

  void Resolve(int dealer) {
    int win; int lose;
    win = 0; lose = 0;
    if ((total == 21) && (numcards == 2)) { win = 2; }
    else if (total > 21) { lose = 1; }
    else if (dealer > 21) { win = 1; }
    else if (total > dealer) { win = 1; }
    else if (dealer > total) { lose = 1; }
    if (win >= 1) { callout("printf", "%s, you won $%d.\n", name, bet); }
    else if (lose >= 1) { callout("printf", "%s, you lost $%d.\n", name, bet); }
    else { callout("printf", "%s, you push!\n", name); }
    win = win * bet;
    lose = lose * bet;
    money = money + win - lose;
  }
}

class Dealer extends Player {

  void Init(int id) {
    total = 0;
    aces = 0;
    numcards = 0;
    name = "Dealer";
  }

  void TakeTurn(BJDeck deck) {
    callout("printf","\n", "%s\'s turn.\n", name);
    while (total <= 16) {
      Hit(deck);
    }
    if (total > 21) { callout("printf", "%s busts with the big %d!\n", name, total); }
    else { callout("printf", "%s stays at %d.\n", name, total); }
  }
}



class House {
  Player[] players;
  Dealer dealer;
  BJDeck deck;


  void SetupGame() {
    callout("printf", "\nWelcome to CS143 BlackJack!\n");
    callout("printf", "---------------------------\n");
    gRnd = new Random;
    callout("printf", "Please enter a random number seed: ");
    gRnd.Init(ReadInteger());
 
    deck = new BJDeck;
    dealer = new Dealer;
    deck.Init();
    deck.Shuffle();
  }

  void SetupPlayers() {
    int i;
    int numPlayers;
    callout("printf", "How many players do we have today? ");
    numPlayers = ReadInteger();
    players = new Player[numPlayers];
    for (i = 0; i < players.length(); i = i + 1) {
      players[i] = new Player;
      players[i].Init(i+1);
    }
  }

  void TakeAllBets() {
    int i;
    callout("printf", "\nFirst, let's take bets.\n");
    for (i = 0; i < players.length(); i = i + 1) {
      if (players[i].HasMoney()) { players[i].PlaceBet(); }
    }
  }

  void TakeAllTurns() {
    int i;
    for (i = 0; i < players.length(); i = i + 1) {
      if (players[i].HasMoney()) { players[i].TakeTurn(deck); }
    }
  }

  void ResolveAllPlayers() {
    int i;

    callout("printf", "\nTime to resolve bets.\n");
    for (i = 0; i < players.length(); i = i + 1) {
      if (players[i].HasMoney()) {
        players[i].Resolve(dealer.GetTotal());
        }
    }
  }

  void PrintAllMoney() {
    int i;

    for (i = 0; i < players.length(); i = i + 1) {
      players[i].PrintMoney();
    }
  }

  void PlayOneGame() {
    if (deck.NumCardsRemaining() < 26) { deck.Shuffle(); }
    TakeAllBets();
    callout("printf", "\nDealer starts. ");
    dealer.Init(0);
    dealer.Hit(deck);
    TakeAllTurns();
    dealer.TakeTurn(deck);
    ResolveAllPlayers();
  }

}

boolean GetYesOrNo(string prompt)
{
   string answer;
   callout("printf", "%s (y/n) ", prompt);
   answer = ReadLine();
   return (answer == "y" || answer == "Y");
}

void main() {
  boolean keepPlaying;
  House house;
  keepPlaying = true;
  house = new House;
  house.SetupGame();
  house.SetupPlayers();
  while (keepPlaying) {
    house.PlayOneGame();
    keepPlaying = GetYesOrNo("\nDo you want to play another hand?");
  }
  house.PrintAllMoney();
  callout("printf", "Thank you for playing...come again soon.\n");
  callout("printf", "\nCS143 BlackJack Copyright (c) 1999 by Peter Mork.\n");
  callout("printf", "(2001 mods by jdz)\n");
}
