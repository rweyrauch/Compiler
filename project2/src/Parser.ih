// Generated by Bisonc++ V4.05.00 on Sat, 14 Feb 2015 14:45:53 -0800

    // Include this file in the sources of the class Parser.

// $insert class.h
#include "Parser.h"


inline void Parser::error(char const *msg)
{
    std::cerr << d_scanner.filename() << msg << " at line " << d_loc__.first_line << ":" << d_loc__.first_column << ".  Unexpected token: " << d_scanner.matched() << std::endl;
    std::cerr << line((size_t)d_loc__.first_line) << std::endl; 
}

const std::string& Parser::line(size_t line_num) const
{
    if (line_num > 0 && line_num <= d_source.size())
    {
        return d_source.at(line_num-1);
    }
    return d_blank;
}

void Parser::preloadSource(const std::string &infile)
{
    std::ifstream input(infile);
    if (input.is_open())
    {
        std::string line;
        
        while (std::getline(input, line))
        {
            d_source.push_back(line);
        }
    }
}

// $insert lex
inline int Parser::lex()
{
    return d_scanner.lex();
}

inline void Parser::print()         
{
    print__();           // displays tokens if --print was specified
}

inline void Parser::exceptionHandler__(std::exception const &exc)         
{
    throw;              // re-implement to handle exceptions thrown by actions
}


    // Add here includes that are only required for the compilation 
    // of Parser's sources.



    // UN-comment the next using-declaration if you want to use
    // int Parser's sources symbols from the namespace std without
    // specifying std::

//using namespace std;
